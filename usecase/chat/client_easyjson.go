// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package chat

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC0e5e3f1DecodeSocioUsecaseChat(in *jlexer.Lexer, out *UpdateMessagePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messageId":
			out.MessageID = uint(in.Uint())
		case "content":
			out.Content = string(in.String())
		case "attachmentsToDelete":
			if in.IsNull() {
				in.Skip()
				out.AttachmentsToDelete = nil
			} else {
				in.Delim('[')
				if out.AttachmentsToDelete == nil {
					if !in.IsDelim(']') {
						out.AttachmentsToDelete = make([]string, 0, 4)
					} else {
						out.AttachmentsToDelete = []string{}
					}
				} else {
					out.AttachmentsToDelete = (out.AttachmentsToDelete)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.AttachmentsToDelete = append(out.AttachmentsToDelete, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeSocioUsecaseChat(out *jwriter.Writer, in UpdateMessagePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messageId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.MessageID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"attachmentsToDelete\":"
		out.RawString(prefix)
		if in.AttachmentsToDelete == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.AttachmentsToDelete {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateMessagePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeSocioUsecaseChat(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateMessagePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeSocioUsecaseChat(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateMessagePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeSocioUsecaseChat(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateMessagePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeSocioUsecaseChat(l, v)
}
func easyjsonC0e5e3f1DecodeSocioUsecaseChat1(in *jlexer.Lexer, out *SendStickerMessagePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stickerId":
			out.StickerID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeSocioUsecaseChat1(out *jwriter.Writer, in SendStickerMessagePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stickerId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.StickerID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendStickerMessagePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeSocioUsecaseChat1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendStickerMessagePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeSocioUsecaseChat1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendStickerMessagePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeSocioUsecaseChat1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendStickerMessagePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeSocioUsecaseChat1(l, v)
}
func easyjsonC0e5e3f1DecodeSocioUsecaseChat2(in *jlexer.Lexer, out *SendMessagePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content":
			out.Content = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]string, 0, 4)
					} else {
						out.Attachments = []string{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Attachments = append(out.Attachments, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeSocioUsecaseChat2(out *jwriter.Writer, in SendMessagePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix[1:])
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Attachments {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendMessagePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeSocioUsecaseChat2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendMessagePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeSocioUsecaseChat2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendMessagePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeSocioUsecaseChat2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendMessagePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeSocioUsecaseChat2(l, v)
}
func easyjsonC0e5e3f1DecodeSocioUsecaseChat3(in *jlexer.Lexer, out *DeleteMessagePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messageId":
			out.MessageID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeSocioUsecaseChat3(out *jwriter.Writer, in DeleteMessagePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messageId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.MessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteMessagePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeSocioUsecaseChat3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteMessagePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeSocioUsecaseChat3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteMessagePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeSocioUsecaseChat3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteMessagePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeSocioUsecaseChat3(l, v)
}
func easyjsonC0e5e3f1DecodeSocioUsecaseChat4(in *jlexer.Lexer, out *Action) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = ChatAction(in.String())
		case "receiver":
			out.Receiver = uint(in.Uint())
		case "csrfToken":
			out.CSRFToken = string(in.String())
		case "payload":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Payload).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0e5e3f1EncodeSocioUsecaseChat4(out *jwriter.Writer, in Action) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"receiver\":"
		out.RawString(prefix)
		out.Uint(uint(in.Receiver))
	}
	{
		const prefix string = ",\"csrfToken\":"
		out.RawString(prefix)
		out.String(string(in.CSRFToken))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.Raw((in.Payload).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Action) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0e5e3f1EncodeSocioUsecaseChat4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Action) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0e5e3f1EncodeSocioUsecaseChat4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Action) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0e5e3f1DecodeSocioUsecaseChat4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Action) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0e5e3f1DecodeSocioUsecaseChat4(l, v)
}
