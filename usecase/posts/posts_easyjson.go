// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package posts

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	domain "socio/domain"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDc9e8747DecodeSocioUsecasePosts(in *jlexer.Lexer, out *PostUpdateInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "postId":
			out.PostID = uint(in.Uint())
		case "content":
			out.Content = string(in.String())
		case "attachmentsToAdd":
			if in.IsNull() {
				in.Skip()
				out.AttachmentsToAdd = nil
			} else {
				in.Delim('[')
				if out.AttachmentsToAdd == nil {
					if !in.IsDelim(']') {
						out.AttachmentsToAdd = make([]string, 0, 4)
					} else {
						out.AttachmentsToAdd = []string{}
					}
				} else {
					out.AttachmentsToAdd = (out.AttachmentsToAdd)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.AttachmentsToAdd = append(out.AttachmentsToAdd, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachmentsToDelete":
			if in.IsNull() {
				in.Skip()
				out.AttachmentsToDelete = nil
			} else {
				in.Delim('[')
				if out.AttachmentsToDelete == nil {
					if !in.IsDelim(']') {
						out.AttachmentsToDelete = make([]string, 0, 4)
					} else {
						out.AttachmentsToDelete = []string{}
					}
				} else {
					out.AttachmentsToDelete = (out.AttachmentsToDelete)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.AttachmentsToDelete = append(out.AttachmentsToDelete, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioUsecasePosts(out *jwriter.Writer, in PostUpdateInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"postId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.PostID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"attachmentsToAdd\":"
		out.RawString(prefix)
		if in.AttachmentsToAdd == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.AttachmentsToAdd {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"attachmentsToDelete\":"
		out.RawString(prefix)
		if in.AttachmentsToDelete == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.AttachmentsToDelete {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostUpdateInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioUsecasePosts(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostUpdateInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioUsecasePosts(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostUpdateInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioUsecasePosts(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostUpdateInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioUsecasePosts(l, v)
}
func easyjsonDc9e8747DecodeSocioUsecasePosts1(in *jlexer.Lexer, out *PostInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "content":
			out.Content = string(in.String())
		case "authorId":
			out.AuthorID = uint(in.Uint())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]string, 0, 4)
					} else {
						out.Attachments = []string{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Attachments = append(out.Attachments, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioUsecasePosts1(out *jwriter.Writer, in PostInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix[1:])
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"authorId\":"
		out.RawString(prefix)
		out.Uint(uint(in.AuthorID))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Attachments {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioUsecasePosts1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioUsecasePosts1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioUsecasePosts1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioUsecasePosts1(l, v)
}
func easyjsonDc9e8747DecodeSocioUsecasePosts2(in *jlexer.Lexer, out *ListUserPostsInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = uint(in.Uint())
		case "lastPostId":
			out.LastPostID = uint(in.Uint())
		case "postsAmount":
			out.PostsAmount = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioUsecasePosts2(out *jwriter.Writer, in ListUserPostsInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"lastPostId\":"
		out.RawString(prefix)
		out.Uint(uint(in.LastPostID))
	}
	{
		const prefix string = ",\"postsAmount\":"
		out.RawString(prefix)
		out.Uint(uint(in.PostsAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListUserPostsInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioUsecasePosts2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListUserPostsInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioUsecasePosts2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListUserPostsInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioUsecasePosts2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListUserPostsInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioUsecasePosts2(l, v)
}
func easyjsonDc9e8747DecodeSocioUsecasePosts3(in *jlexer.Lexer, out *ListUserFriendsPostsInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lastPostId":
			out.LastPostID = uint(in.Uint())
		case "postsAmount":
			out.PostsAmount = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioUsecasePosts3(out *jwriter.Writer, in ListUserFriendsPostsInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"lastPostId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.LastPostID))
	}
	{
		const prefix string = ",\"postsAmount\":"
		out.RawString(prefix)
		out.Uint(uint(in.PostsAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListUserFriendsPostsInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioUsecasePosts3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListUserFriendsPostsInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioUsecasePosts3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListUserFriendsPostsInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioUsecasePosts3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListUserFriendsPostsInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioUsecasePosts3(l, v)
}
func easyjsonDc9e8747DecodeSocioUsecasePosts4(in *jlexer.Lexer, out *ListPostsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "posts":
			if in.IsNull() {
				in.Skip()
				out.Posts = nil
			} else {
				in.Delim('[')
				if out.Posts == nil {
					if !in.IsDelim(']') {
						out.Posts = make([]*domain.Post, 0, 8)
					} else {
						out.Posts = []*domain.Post{}
					}
				} else {
					out.Posts = (out.Posts)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *domain.Post
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(domain.Post)
						}
						easyjsonDc9e8747DecodeSocioDomain(in, v10)
					}
					out.Posts = append(out.Posts, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioUsecasePosts4(out *jwriter.Writer, in ListPostsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"posts\":"
		out.RawString(prefix[1:])
		if in.Posts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Posts {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					easyjsonDc9e8747EncodeSocioDomain(out, *v12)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListPostsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioUsecasePosts4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListPostsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioUsecasePosts4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListPostsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioUsecasePosts4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListPostsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioUsecasePosts4(l, v)
}
func easyjsonDc9e8747DecodeSocioDomain(in *jlexer.Lexer, out *domain.Post) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "postId":
			out.ID = uint(in.Uint())
		case "authorId":
			out.AuthorID = uint(in.Uint())
		case "groupId":
			out.GroupID = uint(in.Uint())
		case "content":
			out.Content = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]string, 0, 4)
					} else {
						out.Attachments = []string{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Attachments = append(out.Attachments, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likedBy":
			if in.IsNull() {
				in.Skip()
				out.LikedByIDs = nil
			} else {
				in.Delim('[')
				if out.LikedByIDs == nil {
					if !in.IsDelim(']') {
						out.LikedByIDs = make([]uint64, 0, 8)
					} else {
						out.LikedByIDs = []uint64{}
					}
				} else {
					out.LikedByIDs = (out.LikedByIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v14 uint64
					v14 = uint64(in.Uint64())
					out.LikedByIDs = append(out.LikedByIDs, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioDomain(out *jwriter.Writer, in domain.Post) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"postId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"authorId\":"
		out.RawString(prefix)
		out.Uint(uint(in.AuthorID))
	}
	if in.GroupID != 0 {
		const prefix string = ",\"groupId\":"
		out.RawString(prefix)
		out.Uint(uint(in.GroupID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Attachments {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likedBy\":"
		out.RawString(prefix)
		if in.LikedByIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.LikedByIDs {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v18))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonDc9e8747DecodeSocioUsecasePosts5(in *jlexer.Lexer, out *LikeWithPostAndUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "likedBy":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(domain.User)
				}
				easyjsonDc9e8747DecodeSocioDomain1(in, out.User)
			}
		case "like":
			if in.IsNull() {
				in.Skip()
				out.Like = nil
			} else {
				if out.Like == nil {
					out.Like = new(domain.PostLike)
				}
				easyjsonDc9e8747DecodeSocioDomain2(in, out.Like)
			}
		case "post":
			if in.IsNull() {
				in.Skip()
				out.Post = nil
			} else {
				if out.Post == nil {
					out.Post = new(domain.Post)
				}
				easyjsonDc9e8747DecodeSocioDomain(in, out.Post)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioUsecasePosts5(out *jwriter.Writer, in LikeWithPostAndUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"likedBy\":"
		out.RawString(prefix[1:])
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjsonDc9e8747EncodeSocioDomain1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"like\":"
		out.RawString(prefix)
		if in.Like == nil {
			out.RawString("null")
		} else {
			easyjsonDc9e8747EncodeSocioDomain2(out, *in.Like)
		}
	}
	{
		const prefix string = ",\"post\":"
		out.RawString(prefix)
		if in.Post == nil {
			out.RawString("null")
		} else {
			easyjsonDc9e8747EncodeSocioDomain(out, *in.Post)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LikeWithPostAndUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioUsecasePosts5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LikeWithPostAndUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioUsecasePosts5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LikeWithPostAndUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioUsecasePosts5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LikeWithPostAndUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioUsecasePosts5(l, v)
}
func easyjsonDc9e8747DecodeSocioDomain2(in *jlexer.Lexer, out *domain.PostLike) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "likeId":
			out.ID = uint(in.Uint())
		case "postId":
			out.PostID = uint(in.Uint())
		case "userId":
			out.UserID = uint(in.Uint())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioDomain2(out *jwriter.Writer, in domain.PostLike) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"likeId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"postId\":"
		out.RawString(prefix)
		out.Uint(uint(in.PostID))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	if true {
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonDc9e8747DecodeSocioDomain1(in *jlexer.Lexer, out *domain.User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.ID = uint(in.Uint())
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "dateOfBirth":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateOfBirth).UnmarshalJSON(data))
			}
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioDomain1(out *jwriter.Writer, in domain.User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	if true {
		const prefix string = ",\"dateOfBirth\":"
		out.RawString(prefix)
		out.Raw((in.DateOfBirth).MarshalJSON())
	}
	if true {
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonDc9e8747DecodeSocioUsecasePosts6(in *jlexer.Lexer, out *LikeWithPost) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "like":
			if in.IsNull() {
				in.Skip()
				out.Like = nil
			} else {
				if out.Like == nil {
					out.Like = new(domain.PostLike)
				}
				easyjsonDc9e8747DecodeSocioDomain2(in, out.Like)
			}
		case "post":
			if in.IsNull() {
				in.Skip()
				out.Post = nil
			} else {
				if out.Post == nil {
					out.Post = new(domain.Post)
				}
				easyjsonDc9e8747DecodeSocioDomain(in, out.Post)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioUsecasePosts6(out *jwriter.Writer, in LikeWithPost) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"like\":"
		out.RawString(prefix[1:])
		if in.Like == nil {
			out.RawString("null")
		} else {
			easyjsonDc9e8747EncodeSocioDomain2(out, *in.Like)
		}
	}
	{
		const prefix string = ",\"post\":"
		out.RawString(prefix)
		if in.Post == nil {
			out.RawString("null")
		} else {
			easyjsonDc9e8747EncodeSocioDomain(out, *in.Post)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LikeWithPost) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioUsecasePosts6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LikeWithPost) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioUsecasePosts6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LikeWithPost) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioUsecasePosts6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LikeWithPost) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioUsecasePosts6(l, v)
}
func easyjsonDc9e8747DecodeSocioUsecasePosts7(in *jlexer.Lexer, out *DeletePostInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "postId":
			out.PostID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioUsecasePosts7(out *jwriter.Writer, in DeletePostInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"postId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.PostID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeletePostInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioUsecasePosts7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeletePostInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioUsecasePosts7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeletePostInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioUsecasePosts7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeletePostInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioUsecasePosts7(l, v)
}
