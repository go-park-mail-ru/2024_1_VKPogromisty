// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package subscriptions

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	domain "socio/domain"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6fbf8f0cDecodeSocioUsecaseSubscriptions(in *jlexer.Lexer, out *GetSubscriptionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subscriptions":
			if in.IsNull() {
				in.Skip()
				out.Subscriptions = nil
			} else {
				in.Delim('[')
				if out.Subscriptions == nil {
					if !in.IsDelim(']') {
						out.Subscriptions = make([]*domain.User, 0, 8)
					} else {
						out.Subscriptions = []*domain.User{}
					}
				} else {
					out.Subscriptions = (out.Subscriptions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *domain.User
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(domain.User)
						}
						easyjson6fbf8f0cDecodeSocioDomain(in, v1)
					}
					out.Subscriptions = append(out.Subscriptions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6fbf8f0cEncodeSocioUsecaseSubscriptions(out *jwriter.Writer, in GetSubscriptionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"subscriptions\":"
		out.RawString(prefix[1:])
		if in.Subscriptions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Subscriptions {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson6fbf8f0cEncodeSocioDomain(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetSubscriptionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6fbf8f0cEncodeSocioUsecaseSubscriptions(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetSubscriptionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6fbf8f0cEncodeSocioUsecaseSubscriptions(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetSubscriptionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6fbf8f0cDecodeSocioUsecaseSubscriptions(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetSubscriptionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6fbf8f0cDecodeSocioUsecaseSubscriptions(l, v)
}
func easyjson6fbf8f0cDecodeSocioDomain(in *jlexer.Lexer, out *domain.User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.ID = uint(in.Uint())
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "dateOfBirth":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateOfBirth).UnmarshalJSON(data))
			}
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6fbf8f0cEncodeSocioDomain(out *jwriter.Writer, in domain.User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	if true {
		const prefix string = ",\"dateOfBirth\":"
		out.RawString(prefix)
		out.Raw((in.DateOfBirth).MarshalJSON())
	}
	if true {
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson6fbf8f0cDecodeSocioUsecaseSubscriptions1(in *jlexer.Lexer, out *GetSubscribersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subscribers":
			if in.IsNull() {
				in.Skip()
				out.Subscribers = nil
			} else {
				in.Delim('[')
				if out.Subscribers == nil {
					if !in.IsDelim(']') {
						out.Subscribers = make([]*domain.User, 0, 8)
					} else {
						out.Subscribers = []*domain.User{}
					}
				} else {
					out.Subscribers = (out.Subscribers)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *domain.User
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(domain.User)
						}
						easyjson6fbf8f0cDecodeSocioDomain(in, v4)
					}
					out.Subscribers = append(out.Subscribers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6fbf8f0cEncodeSocioUsecaseSubscriptions1(out *jwriter.Writer, in GetSubscribersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"subscribers\":"
		out.RawString(prefix[1:])
		if in.Subscribers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Subscribers {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					easyjson6fbf8f0cEncodeSocioDomain(out, *v6)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetSubscribersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6fbf8f0cEncodeSocioUsecaseSubscriptions1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetSubscribersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6fbf8f0cEncodeSocioUsecaseSubscriptions1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetSubscribersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6fbf8f0cDecodeSocioUsecaseSubscriptions1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetSubscribersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6fbf8f0cDecodeSocioUsecaseSubscriptions1(l, v)
}
func easyjson6fbf8f0cDecodeSocioUsecaseSubscriptions2(in *jlexer.Lexer, out *GetFriendsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "friends":
			if in.IsNull() {
				in.Skip()
				out.Friends = nil
			} else {
				in.Delim('[')
				if out.Friends == nil {
					if !in.IsDelim(']') {
						out.Friends = make([]*domain.User, 0, 8)
					} else {
						out.Friends = []*domain.User{}
					}
				} else {
					out.Friends = (out.Friends)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *domain.User
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(domain.User)
						}
						easyjson6fbf8f0cDecodeSocioDomain(in, v7)
					}
					out.Friends = append(out.Friends, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6fbf8f0cEncodeSocioUsecaseSubscriptions2(out *jwriter.Writer, in GetFriendsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"friends\":"
		out.RawString(prefix[1:])
		if in.Friends == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Friends {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					easyjson6fbf8f0cEncodeSocioDomain(out, *v9)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetFriendsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6fbf8f0cEncodeSocioUsecaseSubscriptions2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetFriendsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6fbf8f0cEncodeSocioUsecaseSubscriptions2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetFriendsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6fbf8f0cDecodeSocioUsecaseSubscriptions2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetFriendsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6fbf8f0cDecodeSocioUsecaseSubscriptions2(l, v)
}
