basePath: /api/v1
definitions:
  domain.Dialog:
    properties:
      lastMessage:
        $ref: '#/definitions/domain.PersonalMessage'
      user1:
        $ref: '#/definitions/domain.User'
      user2:
        $ref: '#/definitions/domain.User'
    type: object
  domain.PersonalMessage:
    properties:
      content:
        type: string
      createdAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      id:
        type: integer
      receiverId:
        type: integer
      senderId:
        type: integer
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  domain.Post:
    properties:
      attachments:
        items:
          type: string
        type: array
      authorId:
        type: integer
      content:
        type: string
      createdAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      groupId:
        type: integer
      likedBy:
        items:
          type: integer
        type: array
      postId:
        type: integer
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  domain.PostLike:
    properties:
      createdAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      likeId:
        type: integer
      postId:
        type: integer
      userId:
        type: integer
    type: object
  domain.PostWithAuthor:
    properties:
      author:
        $ref: '#/definitions/domain.User'
      post:
        $ref: '#/definitions/domain.Post'
    type: object
  domain.PostWithAuthorAndGroup:
    properties:
      author:
        $ref: '#/definitions/domain.User'
      group:
        $ref: '#/definitions/domain.PublicGroup'
      post:
        $ref: '#/definitions/domain.Post'
    type: object
  domain.PublicGroup:
    properties:
      avatar:
        type: string
      createdAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      subscribersCount:
        type: integer
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  domain.PublicGroupSubscription:
    properties:
      createdAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      id:
        type: integer
      publicGroupId:
        type: integer
      subscriberId:
        type: integer
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  domain.Subscription:
    properties:
      createdAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      subscribedTo:
        type: integer
      subscriber:
        type: integer
      subscriptionId:
        type: integer
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  domain.User:
    properties:
      avatar:
        example: default_avatar.png
        type: string
      createdAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      dateOfBirth:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      userId:
        type: integer
    type: object
  errors.HTTPError:
    properties:
      error:
        type: string
    type: object
  json.JSONResponse:
    properties:
      body: {}
    type: object
  posts.LikeWithPostAndUser:
    properties:
      like:
        $ref: '#/definitions/domain.PostLike'
      likedBy:
        $ref: '#/definitions/domain.User'
      post:
        $ref: '#/definitions/domain.Post'
    type: object
  publicgroup.PublicGroupWithInfo:
    properties:
      isSubscribed:
        type: boolean
      publicGroup:
        $ref: '#/definitions/domain.PublicGroup'
    type: object
  rest.CSRFTokenResponse:
    properties:
      csrfToken:
        type: string
    type: object
  rest.CheckIfUserIsAdminRes:
    properties:
      isAdmin:
        type: boolean
    type: object
  rest.ListUserPostsResponse:
    properties:
      author:
        $ref: '#/definitions/domain.User'
      posts:
        items:
          $ref: '#/definitions/domain.Post'
        type: array
    type: object
  subscriptions.GetFriendsResponse:
    properties:
      friends:
        items:
          $ref: '#/definitions/domain.User'
        type: array
    type: object
  subscriptions.GetSubscribersResponse:
    properties:
      subscribers:
        items:
          $ref: '#/definitions/domain.User'
        type: array
    type: object
  subscriptions.GetSubscriptionsResponse:
    properties:
      subscriptions:
        items:
          $ref: '#/definitions/domain.User'
        type: array
    type: object
  user.UserWithSubsInfo:
    properties:
      isSubscribedTo:
        type: boolean
      isSubscriber:
        type: boolean
      user:
        $ref: '#/definitions/domain.User'
    type: object
host: localhost:8080
info:
  contact:
    email: petr09mitin@mail.ru
    name: Petr Mitin
    url: https://github.com/Petr09Mitin
  description: First version of Socio API
  title: Socio API
  version: "1.0"
paths:
  /auth/login/:
    post:
      consumes:
      - application/json
      description: login user by email and password
      operationId: auth/login
      parameters:
      - description: Email of the user
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Password of the user
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: session_id=some_session_id; Path=/; Max-Age=36000; HttpOnly;
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: handle user's login
      tags:
      - auth
  /auth/logout/:
    delete:
      consumes:
      - application/json
      description: logout user that is authorized
      operationId: auth/logout
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: session_id=some_session_id; Path=/; HttpOnly; Expires=Thu,
                01 Jan 1970 00:00:00 GMT;
              type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: handle user's logout
      tags:
      - auth
  /auth/signup/:
    post:
      consumes:
      - multipart/form-data
      description: registrate user by his data
      operationId: auth/signup
      parameters:
      - description: First name of the user
        in: formData
        name: firstName
        required: true
        type: string
      - description: Last name of the user
        in: formData
        name: lastName
        required: true
        type: string
      - description: Email of the user
        in: formData
        name: email
        required: true
        type: string
      - description: Password of the user
        in: formData
        minLength: 6
        name: password
        required: true
        type: string
      - description: Repeat password of the user
        in: formData
        minLength: 6
        name: repeatPassword
        required: true
        type: string
      - description: Date of birth of the user
        example: "2021-01-01"
        format: date
        in: formData
        name: dateOfBirth
        required: true
        type: string
      - description: Avatar of the user
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: handle user's registration flow
      tags:
      - auth
  /chat/:
    get:
      consumes:
      - application/json
      description: |
        Serve websocket connection. You can send actions to connection following simple structure:

        {
        "type": ActionType,
        "receiver": uint,
        "csrfToken": string,
        "payload": interface{}
        }

        ActionType is a string with one of following values: "SEND_MESSAGE", "UPDATE_MESSAGE", "DELETE_MESSAGE"

        If "type" = "SEND_MESSAGE", then payload should be {"content": string}
        If "type" = "UPDATE_MESSAGE", then payload should be {"messageId": uint, "content": string}
        If "type" = "DELETE_MESSAGE", then payload should be {"messageId": uint}

        In response clients, subscribed to corresponding channel, will get same structure back:
        {
        "type": ActionType,
        "receiver": uint,
        "csrfToken": string,
        "payload": interface{}
        }

        "payload" can be:
        PersonalMessage if "type" = "SEND_MESSAGE"
        PersonalMessage if "type" = "UPDATE_MESSAGE"
        Absent if "type" = "DELETE_MESSAGE"
        {"error": string} if error happened at any point of query processing
      operationId: chat/serve_ws
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: serve websocket connection
      tags:
      - chat
  /chat/dialogs/:
    get:
      consumes:
      - application/json
      description: get user dialogs
      operationId: chat/get_dialogs
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/domain.Dialog'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user dialogs
      tags:
      - chat
  /chat/messages/:
    get:
      consumes:
      - application/json
      description: get messages by dialog with pagination
      operationId: chat/get_messages
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: ID of the peer
        in: query
        name: peerId
        required: true
        type: integer
      - description: ID of the last message, if last messages needed, should be set
          to 0
        in: query
        name: lastMessageId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/domain.PersonalMessage'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get messages by dialog
      tags:
      - chat
  /csrf/:
    get:
      consumes:
      - application/json
      description: Get CSRF token
      operationId: csrf/get_csrf_token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/rest.CSRFTokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get CSRF token
      tags:
      - csrf
  /groups/:
    post:
      consumes:
      - application/json
      description: create public group
      operationId: groups/create
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Name of the group
        in: formData
        name: name
        required: true
        type: string
      - description: Description of the group
        in: formData
        name: description
        required: true
        type: string
      - description: Avatar of the group
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.PublicGroup'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: create public group
      tags:
      - groups
  /groups/{groupID}:
    delete:
      consumes:
      - application/json
      description: delete public group
      operationId: groups/delete
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/json.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: delete public group
      tags:
      - groups
    get:
      consumes:
      - application/json
      description: get public group by ID
      operationId: groups/get
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/publicgroup.PublicGroupWithInfo'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get public group by ID
      tags:
      - groups
    put:
      consumes:
      - multipart/form-data
      description: update public group
      operationId: groups/update
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Name of the group
        in: formData
        name: name
        type: string
      - description: Description of the group
        in: formData
        name: description
        type: string
      - description: Avatar of the group
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.PublicGroup'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: update public group
      tags:
      - groups
  /groups/{groupID}/admins/:
    delete:
      consumes:
      - application/json
      description: delete public group admin
      operationId: groups/admin/delete
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/json.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: delete public group admin
      tags:
      - groups
    get:
      consumes:
      - application/json
      description: get admins by public group ID
      operationId: groups/admins
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/domain.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get admins by public group ID
      tags:
      - groups
    post:
      consumes:
      - application/json
      description: create public group admin
      operationId: groups/admin/create
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/json.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: create public group admin
      tags:
      - groups
  /groups/{groupID}/admins/check:
    get:
      consumes:
      - application/json
      description: check if user is admin
      operationId: groups/admins/check
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/rest.CheckIfUserIsAdminRes'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: check if user is admin
      tags:
      - groups
  /groups/{groupID}/is-sub:
    get:
      consumes:
      - application/json
      description: get subscription by public group ID and subscriber ID
      operationId: groups/is-sub
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.PublicGroupSubscription'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get subscription by public group ID and subscriber ID
      tags:
      - groups
  /groups/{groupID}/posts/:
    get:
      consumes:
      - application/json
      description: get posts of public group
      operationId: groups/posts
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Last post ID
        in: query
        name: lastPostId
        type: string
      - description: Posts amount
        in: query
        name: postsAmount
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/domain.Post'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get posts of public group
      tags:
      - groups
    post:
      consumes:
      - multipart/form-data
      description: create post in public group
      operationId: groups/posts/create
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Content of the post
        in: formData
        name: content
        required: true
        type: string
      - description: Attachments of the post
        in: formData
        name: attachments
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.PostWithAuthorAndGroup'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: create post in public group
      tags:
      - groups
  /groups/{groupID}/sub:
    post:
      consumes:
      - application/json
      description: subscribe to public group
      operationId: groups/sub
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/json.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: subscribe to public group
      tags:
      - groups
  /groups/{groupID}/unsub:
    post:
      consumes:
      - application/json
      description: unsubscribe from public group
      operationId: groups/unsub
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/json.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: unsubscribe from public group
      tags:
      - groups
  /groups/by-sub/{userID}:
    get:
      consumes:
      - application/json
      description: get public groups by subscriber ID
      operationId: groups/by-sub
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/domain.PublicGroup'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get public groups by subscriber ID
      tags:
      - groups
  /groups/search:
    get:
      consumes:
      - application/json
      description: search public groups by name
      operationId: groups/search
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/publicgroup.PublicGroupWithInfo'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: search public groups by name
      tags:
      - groups
  /posts/:
    delete:
      consumes:
      - application/json
      description: delete post by id
      operationId: posts/delete
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: ID of the post
        in: body
        name: post_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/json.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: delete post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: get user posts
      operationId: posts/get_user_posts
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: ID of the user
        in: query
        name: userId
        required: true
        type: integer
      - description: ID of the last post, if 0 - get first posts
        in: query
        name: lastPostId
        type: integer
      - description: Amount of posts to get, if 0 - get 20 posts
        in: query
        name: postsAmount
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.ListUserPostsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user posts
      tags:
      - posts
    post:
      consumes:
      - multipart/form-data
      description: create post with attachments
      operationId: posts/create
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Content of the post
        in: formData
        name: content
        required: true
        type: string
      - description: Attachments of the post
        in: formData
        name: attachments
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.PostWithAuthor'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: create post
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: update post by id
      operationId: posts/update
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: ID of the post
        in: body
        name: post_id
        required: true
        schema:
          type: integer
      - description: Content of the post
        in: body
        name: content
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: "application/json\"\t\"Attachments is always null!!!"
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.Post'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: update post
      tags:
      - posts
  /posts/{id}:
    get:
      consumes:
      - application/json
      description: get post by id
      operationId: posts/get_post_by_id
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: ID of the post
        in: query
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get post by id
      tags:
      - posts
  /posts/all:
    get:
      consumes:
      - application/json
      description: get posts by group subscriptions and user subscriptions
      operationId: posts/get_posts_by_group_subscriptions_and_user_subscriptions
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: ID of the last post, if 0 - get first posts
        in: query
        name: lastPostId
        type: integer
      - description: Amount of posts to get, if 0 - get 20 posts
        in: query
        name: postsAmount
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.PostWithAuthorAndGroup'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get posts by group subscriptions and user subscriptions
      tags:
      - posts
  /posts/friends:
    get:
      consumes:
      - application/json
      description: get user friends posts
      operationId: posts/get_user_friends_posts
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: ID of the last post
        in: query
        name: lastPostId
        type: integer
      - description: Amount of posts to get, if 0 - get 20 posts
        in: query
        name: postsAmount
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/domain.PostWithAuthor'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user friends posts
      tags:
      - posts
  /posts/groups:
    get:
      consumes:
      - application/json
      description: get group posts by subscriptions
      operationId: posts/get_group_posts_by_subscriptions
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: ID of the last post, if 0 - get first posts
        in: query
        name: lastPostId
        type: integer
      - description: Amount of posts to get, if 0 - get 20 posts
        in: query
        name: postsAmount
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.PostWithAuthorAndGroup'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get group posts by subscriptions
      tags:
      - posts
  /posts/like:
    post:
      consumes:
      - application/json
      description: like post
      operationId: posts/like
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: ID of the post
        in: body
        name: postId
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.PostLike'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: like post
      tags:
      - posts
  /posts/liked:
    get:
      consumes:
      - application/json
      description: |-
        get posts that are authored by authorized user and liked by some people,
        for every like it returns post and user that liked that post
      operationId: posts/get_liked_posts
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: ID of the last like, if 0 - get first likes
        in: query
        name: lastLikeId
        type: integer
      - description: Amount of liked posts to get, if 0 - get 20 liked posts
        in: query
        name: postsAmount
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/posts.LikeWithPostAndUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get liked posts
      tags:
      - posts
  /posts/new:
    get:
      consumes:
      - application/json
      description: get new posts
      operationId: posts/get_new_posts
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: ID of the last post, if 0 - get first posts
        in: query
        name: lastPostId
        type: integer
      - description: Amount of posts to get, if 0 - get 20 posts
        in: query
        name: postsAmount
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.PostWithAuthorAndGroup'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get new posts
      tags:
      - posts
  /posts/unlike:
    delete:
      consumes:
      - application/json
      description: unlike post
      operationId: posts/unlike
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: ID of the post
        in: body
        name: postId
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/json.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: unlike post
      tags:
      - posts
  /profile/:
    delete:
      consumes:
      - application/json
      description: delete user profile
      operationId: profile/delete
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: delete user profile
      tags:
      - profile
    put:
      consumes:
      - multipart/form-data
      description: update user profile
      operationId: profile/update
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: First name
        in: formData
        name: firstName
        type: string
      - description: Last name
        in: formData
        name: lastName
        type: string
      - description: Email
        in: formData
        name: email
        type: string
      - description: Password
        in: formData
        name: password
        type: string
      - description: Repeat password
        in: formData
        name: repeatPassword
        type: string
      - description: Date of birth
        in: formData
        name: dateOfBirth
        type: string
      - description: Avatar
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: update user profile
      tags:
      - profile
  /profile/{userID}:
    get:
      consumes:
      - application/json
      description: get user profile with subscriptions info
      operationId: profile/get
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: User ID, if empty - get authorized user profile
        in: path
        name: userID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/user.UserWithSubsInfo'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user profile with subscriptions info
      tags:
      - profile
  /profile/search:
    get:
      consumes:
      - application/json
      description: search users by name
      operationId: profile/search
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/domain.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: search users by name
      tags:
      - profile
  /subscriptions/:
    delete:
      consumes:
      - application/json
      description: unsubscribe from user
      operationId: subscriptions/unsubscribe
      parameters:
      - description: User to unsubscribe from
        in: body
        name: subscribedTo
        required: true
        schema:
          type: integer
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: handle user's unsubscription flow
      tags:
      - subscriptions
    post:
      consumes:
      - application/json
      description: subscribe to user
      operationId: subscriptions/subscribe
      parameters:
      - description: Subscribed to ID
        in: body
        name: subscribedTo
        required: true
        schema:
          type: integer
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.Subscription'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: handle user's subscription flow
      tags:
      - subscriptions
  /subscriptions/friends/:
    get:
      consumes:
      - application/json
      description: get user's friends
      operationId: subscriptions/friends
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/subscriptions.GetFriendsResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user's friends
      tags:
      - subscriptions
  /subscriptions/subscribers/:
    get:
      consumes:
      - application/json
      description: get user's subscribers
      operationId: subscriptions/subscribers
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/subscriptions.GetSubscribersResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user's subscribers
      tags:
      - subscriptions
  /subscriptions/subscriptions/:
    get:
      consumes:
      - application/json
      description: get user's subscriptions
      operationId: subscriptions/subscriptions
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: CSRF token
        in: header
        name: X-CSRF-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/subscriptions.GetSubscriptionsResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user's subscriptions
      tags:
      - subscriptions
swagger: "2.0"
