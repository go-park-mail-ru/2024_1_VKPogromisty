basePath: /api/v1
definitions:
  auth.IsAuthorizedResponse:
    properties:
      isAuthorized:
        type: boolean
    type: object
  auth.LoginResponse:
    properties:
      sessionId:
        type: string
      user:
        $ref: '#/definitions/domain.User'
    type: object
  domain.Post:
    properties:
      attachments:
        items:
          type: string
        type: array
      authorId:
        type: integer
      content:
        type: string
      createdAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      postId:
        type: integer
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  domain.PostWithAuthor:
    properties:
      author:
        $ref: '#/definitions/domain.User'
      post:
        $ref: '#/definitions/domain.Post'
    type: object
  domain.Subscription:
    properties:
      createdAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      subscribedTo:
        type: integer
      subscriber:
        type: integer
      subscriptionId:
        type: integer
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
    type: object
  domain.User:
    properties:
      avatar:
        example: default_avatar.png
        type: string
      createdAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      dateOfBirth:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        format: date-time
        type: string
      userId:
        type: integer
    type: object
  errors.HTTPError:
    properties:
      error:
        type: string
    type: object
  json.JSONResponse:
    properties:
      body: {}
    type: object
  profile.UserWithSubsInfo:
    properties:
      isSubscribedTo:
        type: boolean
      isSubscriber:
        type: boolean
      user:
        $ref: '#/definitions/domain.User'
    type: object
  rest.ListUserPostsResponse:
    properties:
      author:
        $ref: '#/definitions/domain.User'
      posts:
        items:
          $ref: '#/definitions/domain.Post'
        type: array
    type: object
  subscriptions.GetFriendsResponse:
    properties:
      friends:
        items:
          $ref: '#/definitions/domain.User'
        type: array
    type: object
  subscriptions.GetSubscribersResponse:
    properties:
      subscribers:
        items:
          $ref: '#/definitions/domain.User'
        type: array
    type: object
  subscriptions.GetSubscriptionsResponse:
    properties:
      subscriptions:
        items:
          $ref: '#/definitions/domain.User'
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: petr09mitin@mail.ru
    name: Petr Mitin
    url: https://github.com/Petr09Mitin
  description: First version of Socio API
  title: Socio API
  version: "1.0"
paths:
  /auth/is-authorized:
    get:
      consumes:
      - application/json
      operationId: auth/is-authorized
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: session_id=some_session_id; Path=/; HttpOnly; Expires=Thu,
                01 Jan 1970 00:00:00 GMT;
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/auth.IsAuthorizedResponse'
              type: object
        "500":
          description: Internal Server Error
      summary: check if user is authorized
      tags:
      - auth
  /auth/login/:
    post:
      consumes:
      - application/json
      description: login user by email and password
      operationId: auth/login
      parameters:
      - description: Email of the user
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Password of the user
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: session_id=some_session_id; Path=/; Max-Age=36000; HttpOnly;
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/auth.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: handle user's login
      tags:
      - auth
  /auth/logout/:
    delete:
      consumes:
      - application/json
      description: logout user that is authorized
      operationId: auth/logout
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              description: session_id=some_session_id; Path=/; HttpOnly; Expires=Thu,
                01 Jan 1970 00:00:00 GMT;
              type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: handle user's logout
      tags:
      - auth
  /auth/signup/:
    post:
      consumes:
      - multipart/form-data
      description: registrate user by his data
      operationId: auth/signup
      parameters:
      - description: First name of the user
        in: formData
        name: firstName
        required: true
        type: string
      - description: Last name of the user
        in: formData
        name: lastName
        required: true
        type: string
      - description: Email of the user
        in: formData
        name: email
        required: true
        type: string
      - description: Password of the user
        in: formData
        minLength: 6
        name: password
        required: true
        type: string
      - description: Repeat password of the user
        in: formData
        minLength: 6
        name: repeatPassword
        required: true
        type: string
      - description: Date of birth of the user
        example: "2021-01-01"
        format: date
        in: formData
        name: dateOfBirth
        required: true
        type: string
      - description: Avatar of the user
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: handle user's registration flow
      tags:
      - auth
  /posts/:
    delete:
      consumes:
      - application/json
      description: delete post by id
      operationId: posts/delete
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: ID of the post
        in: body
        name: post_id
        required: true
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/json.JSONResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: delete post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: get user posts
      operationId: posts/get_user_posts
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: ID of the user
        in: body
        name: user_id
        required: true
        schema:
          type: integer
      - description: ID of the last post
        in: body
        name: last_post_id
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.ListUserPostsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user posts
      tags:
      - posts
    post:
      consumes:
      - multipart/form-data
      description: create post with attachments
      operationId: posts/create
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: Content of the post
        in: formData
        name: content
        required: true
        type: string
      - description: Attachments of the post
        in: formData
        name: attachments
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.PostWithAuthor'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: create post
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: update post by id
      operationId: posts/update
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: ID of the post
        in: body
        name: post_id
        required: true
        schema:
          type: integer
      - description: Content of the post
        in: body
        name: content
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: "application/json\"\t\"Attachments is always null!!!"
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.Post'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: update post
      tags:
      - posts
  /posts/friends:
    get:
      consumes:
      - application/json
      description: get user friends posts
      operationId: posts/get_user_friends_posts
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: ID of the user
        in: body
        name: user_id
        required: true
        schema:
          type: integer
      - description: ID of the last post
        in: body
        name: last_post_id
        schema:
          type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/domain.PostWithAuthor'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user friends posts
      tags:
      - posts
  /profile/:
    delete:
      consumes:
      - application/json
      description: delete user profile
      operationId: profile/delete
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: delete user profile
      tags:
      - profile
    put:
      consumes:
      - multipart/form-data
      description: update user profile
      operationId: profile/update
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: First name
        in: formData
        name: firstName
        type: string
      - description: Last name
        in: formData
        name: lastName
        type: string
      - description: Email
        in: formData
        name: email
        type: string
      - description: Password
        in: formData
        name: password
        type: string
      - description: Repeat password
        in: formData
        name: repeatPassword
        type: string
      - description: Date of birth
        in: formData
        name: dateOfBirth
        type: string
      - description: Avatar
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: update user profile
      tags:
      - profile
  /profile/{userID}:
    get:
      consumes:
      - application/json
      description: get user profile with subscriptions info
      operationId: profile/get
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      - description: User ID, if empty - get authorized user profile
        in: path
        name: userID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/profile.UserWithSubsInfo'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user profile with subscriptions info
      tags:
      - profile
  /subscriptions/:
    delete:
      consumes:
      - application/json
      description: unsubscribe from user
      operationId: subscriptions/unsubscribe
      parameters:
      - description: User to unsubscribe from
        in: body
        name: subscribedTo
        required: true
        schema:
          type: integer
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: handle user's unsubscription flow
      tags:
      - subscriptions
    post:
      consumes:
      - application/json
      description: subscribe to user
      operationId: subscriptions/subscribe
      parameters:
      - description: Subscribed to ID
        in: body
        name: subscribedTo
        required: true
        schema:
          type: integer
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/domain.Subscription'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: handle user's subscription flow
      tags:
      - subscriptions
  /subscriptions/friends/:
    get:
      consumes:
      - application/json
      description: get user's friends
      operationId: subscriptions/friends
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/subscriptions.GetFriendsResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user's friends
      tags:
      - subscriptions
  /subscriptions/subscribers/:
    get:
      consumes:
      - application/json
      description: get user's subscribers
      operationId: subscriptions/subscribers
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/subscriptions.GetSubscribersResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user's subscribers
      tags:
      - subscriptions
  /subscriptions/subscriptions/:
    get:
      consumes:
      - application/json
      description: get user's subscriptions
      operationId: subscriptions/subscriptions
      parameters:
      - description: session_id=some_session
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/json.JSONResponse'
            - properties:
                body:
                  $ref: '#/definitions/subscriptions.GetSubscriptionsResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: get user's subscriptions
      tags:
      - subscriptions
swagger: "2.0"
