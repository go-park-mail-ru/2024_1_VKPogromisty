version: '3.9'
services:
  postgresdb:
    image: postgres:16.2
    container_name: postgres_container
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DBNAME}
    ports:
      - 5431:5432
    volumes:
      - pg_data:/var/lib/postgresql/data/

  redis:
    image: redis:7.2.4
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis_data:/root/redis/
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=6379
      - REDIS_DATABASES=16

  minio:
    image: minio/minio:RELEASE.2024-04-18T19-09-19Z
    volumes:
      - ./static/:/data/
    ports:
      - 9000:9000
    command: server /data
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}

  user_service:
    image: socio/user-service:latest
    container_name: user_service_container
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_DBNAME=${PG_DBNAME}
      - PG_HOST=postgresdb
      - PG_PORT=${PG_PORT}
    tty: true
    ports:
      - 8082:8082
    restart: always
    volumes:
      - ./volumes/logs/:/var/log/socio/
    depends_on:
      - postgresdb
      - redis
      - minio
  
  post_service:
    image: socio/post-service:latest
    container_name: post_service_container
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_DBNAME=${PG_DBNAME}
      - PG_HOST=postgresdb
      - PG_PORT=${PG_PORT}
    tty: true
    ports:
      - 8083:8083
    restart: always
    volumes:
      - ./volumes/logs/:/var/log/socio/
    depends_on:
      - postgresdb
      - redis
      - minio
      - user_service
  
  public_group_service:
    image: socio/public-group-service:latest
    container_name: public_group_service_container
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_DBNAME=${PG_DBNAME}
      - PG_HOST=postgresdb
      - PG_PORT=${PG_PORT}
    tty: true
    ports:
      - 8085:8085
    restart: always
    volumes:
      - ./volumes/logs/:/var/log/socio/
    depends_on:
      - postgresdb
      - redis
      - minio
    
  auth_service:
    image: socio/auth-service:latest
    container_name: auth_service_container
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_DBNAME=${PG_DBNAME}
      - PG_HOST=postgresdb
      - PG_PORT=${PG_PORT}
    tty: true
    ports:
      - 8084:8084
      - 9096:9096
    restart: always
    volumes:
      - ./volumes/logs/:/var/log/socio/
    depends_on:
      - postgresdb
      - redis
      - user_service

  app:
    image: socio/app-service:latest
    container_name: golang_container
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PG_USER=${PG_USER}
      - PG_PASSWORD=${PG_PASSWORD}
      - PG_DBNAME=${PG_DBNAME}
      - PG_HOST=postgresdb
      - PG_PORT=${PG_PORT}
    tty: true
    ports:
      - 8001:8001
      - 8080:8080
    restart: always
    volumes:
      - .:/app
      - ./static/:/static/
      - ./volumes/logs/:/var/log/socio/
    depends_on:
      - postgresdb
      - redis
      - user_service
      - post_service
      - auth_service
  
  prometheus:
    image: prom/prometheus:v2.52.0-rc.1
    container_name: prometheus
    command:
      - '--config.file=/etc/config/prometheus.yml'
    volumes:
      - ./prometheus:/etc/config
    ports:
      - 9090:9090
    depends_on:
      - app
  
  node_exporter:
    image: prom/node-exporter:v1.8.0
    container_name: node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    depends_on:
      - app

  cadvisor:
    image: google/cadvisor:v0.32.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 9091:8080
    depends_on:
      - app
  
  grafana:
    image: grafana/grafana:10.4.2-ubuntu
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
        - app
        - prometheus
        - node_exporter
        - cadvisor
  
  nginx:
    image: nginx:1.25.4
    restart: always
    volumes:
      - ./volumes/nginx/:/etc/nginx/
      - ./static/:/static/
      - ./volumes/certbot/www/:/var/www/certbot/:ro
      - ./volumes/certbot/conf/:/etc/letsencrypt/:ro
    ports:
      - 80:80
      - 443:443
    depends_on:
      - app

volumes:
  pg_data:
  redis_data:
  grafana_data:
