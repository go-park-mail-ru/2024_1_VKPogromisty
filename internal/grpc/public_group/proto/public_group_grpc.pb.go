// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package publicgroup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicGroupClient is the client API for PublicGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicGroupClient interface {
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetByIDResponse, error)
	SearchByName(ctx context.Context, in *SearchByNameRequest, opts ...grpc.CallOption) (*SearchByNameResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetSubscriptionByPublicGroupIDAndSubscriberID(ctx context.Context, in *GetSubscriptionByPublicGroupIDAndSubscriberIDRequest, opts ...grpc.CallOption) (*GetSubscriptionByPublicGroupIDAndSubscriberIDResponse, error)
	GetBySubscriberID(ctx context.Context, in *GetBySubscriberIDRequest, opts ...grpc.CallOption) (*GetBySubscriberIDResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (PublicGroup_UploadClient, error)
	GetSubscriptionIDs(ctx context.Context, in *GetSubscriptionIDsRequest, opts ...grpc.CallOption) (*GetSubscriptionIDsResponse, error)
}

type publicGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicGroupClient(cc grpc.ClientConnInterface) PublicGroupClient {
	return &publicGroupClient{cc}
}

func (c *publicGroupClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetByIDResponse, error) {
	out := new(GetByIDResponse)
	err := c.cc.Invoke(ctx, "/publicgroup.PublicGroup/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicGroupClient) SearchByName(ctx context.Context, in *SearchByNameRequest, opts ...grpc.CallOption) (*SearchByNameResponse, error) {
	out := new(SearchByNameResponse)
	err := c.cc.Invoke(ctx, "/publicgroup.PublicGroup/SearchByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicGroupClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/publicgroup.PublicGroup/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicGroupClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/publicgroup.PublicGroup/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicGroupClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/publicgroup.PublicGroup/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicGroupClient) GetSubscriptionByPublicGroupIDAndSubscriberID(ctx context.Context, in *GetSubscriptionByPublicGroupIDAndSubscriberIDRequest, opts ...grpc.CallOption) (*GetSubscriptionByPublicGroupIDAndSubscriberIDResponse, error) {
	out := new(GetSubscriptionByPublicGroupIDAndSubscriberIDResponse)
	err := c.cc.Invoke(ctx, "/publicgroup.PublicGroup/GetSubscriptionByPublicGroupIDAndSubscriberID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicGroupClient) GetBySubscriberID(ctx context.Context, in *GetBySubscriberIDRequest, opts ...grpc.CallOption) (*GetBySubscriberIDResponse, error) {
	out := new(GetBySubscriberIDResponse)
	err := c.cc.Invoke(ctx, "/publicgroup.PublicGroup/GetBySubscriberID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicGroupClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/publicgroup.PublicGroup/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicGroupClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, "/publicgroup.PublicGroup/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicGroupClient) Upload(ctx context.Context, opts ...grpc.CallOption) (PublicGroup_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &PublicGroup_ServiceDesc.Streams[0], "/publicgroup.PublicGroup/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicGroupUploadClient{stream}
	return x, nil
}

type PublicGroup_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type publicGroupUploadClient struct {
	grpc.ClientStream
}

func (x *publicGroupUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicGroupUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicGroupClient) GetSubscriptionIDs(ctx context.Context, in *GetSubscriptionIDsRequest, opts ...grpc.CallOption) (*GetSubscriptionIDsResponse, error) {
	out := new(GetSubscriptionIDsResponse)
	err := c.cc.Invoke(ctx, "/publicgroup.PublicGroup/GetSubscriptionIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicGroupServer is the server API for PublicGroup service.
// All implementations must embed UnimplementedPublicGroupServer
// for forward compatibility
type PublicGroupServer interface {
	GetByID(context.Context, *GetByIDRequest) (*GetByIDResponse, error)
	SearchByName(context.Context, *SearchByNameRequest) (*SearchByNameResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	GetSubscriptionByPublicGroupIDAndSubscriberID(context.Context, *GetSubscriptionByPublicGroupIDAndSubscriberIDRequest) (*GetSubscriptionByPublicGroupIDAndSubscriberIDResponse, error)
	GetBySubscriberID(context.Context, *GetBySubscriberIDRequest) (*GetBySubscriberIDResponse, error)
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	Upload(PublicGroup_UploadServer) error
	GetSubscriptionIDs(context.Context, *GetSubscriptionIDsRequest) (*GetSubscriptionIDsResponse, error)
	mustEmbedUnimplementedPublicGroupServer()
}

// UnimplementedPublicGroupServer must be embedded to have forward compatible implementations.
type UnimplementedPublicGroupServer struct {
}

func (UnimplementedPublicGroupServer) GetByID(context.Context, *GetByIDRequest) (*GetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedPublicGroupServer) SearchByName(context.Context, *SearchByNameRequest) (*SearchByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByName not implemented")
}
func (UnimplementedPublicGroupServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPublicGroupServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPublicGroupServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPublicGroupServer) GetSubscriptionByPublicGroupIDAndSubscriberID(context.Context, *GetSubscriptionByPublicGroupIDAndSubscriberIDRequest) (*GetSubscriptionByPublicGroupIDAndSubscriberIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionByPublicGroupIDAndSubscriberID not implemented")
}
func (UnimplementedPublicGroupServer) GetBySubscriberID(context.Context, *GetBySubscriberIDRequest) (*GetBySubscriberIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySubscriberID not implemented")
}
func (UnimplementedPublicGroupServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPublicGroupServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedPublicGroupServer) Upload(PublicGroup_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedPublicGroupServer) GetSubscriptionIDs(context.Context, *GetSubscriptionIDsRequest) (*GetSubscriptionIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionIDs not implemented")
}
func (UnimplementedPublicGroupServer) mustEmbedUnimplementedPublicGroupServer() {}

// UnsafePublicGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicGroupServer will
// result in compilation errors.
type UnsafePublicGroupServer interface {
	mustEmbedUnimplementedPublicGroupServer()
}

func RegisterPublicGroupServer(s grpc.ServiceRegistrar, srv PublicGroupServer) {
	s.RegisterService(&PublicGroup_ServiceDesc, srv)
}

func _PublicGroup_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicGroupServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publicgroup.PublicGroup/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicGroupServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicGroup_SearchByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicGroupServer).SearchByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publicgroup.PublicGroup/SearchByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicGroupServer).SearchByName(ctx, req.(*SearchByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicGroup_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicGroupServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publicgroup.PublicGroup/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicGroupServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicGroup_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicGroupServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publicgroup.PublicGroup/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicGroupServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicGroup_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicGroupServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publicgroup.PublicGroup/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicGroupServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicGroup_GetSubscriptionByPublicGroupIDAndSubscriberID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionByPublicGroupIDAndSubscriberIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicGroupServer).GetSubscriptionByPublicGroupIDAndSubscriberID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publicgroup.PublicGroup/GetSubscriptionByPublicGroupIDAndSubscriberID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicGroupServer).GetSubscriptionByPublicGroupIDAndSubscriberID(ctx, req.(*GetSubscriptionByPublicGroupIDAndSubscriberIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicGroup_GetBySubscriberID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBySubscriberIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicGroupServer).GetBySubscriberID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publicgroup.PublicGroup/GetBySubscriberID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicGroupServer).GetBySubscriberID(ctx, req.(*GetBySubscriberIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicGroup_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicGroupServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publicgroup.PublicGroup/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicGroupServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicGroup_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicGroupServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publicgroup.PublicGroup/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicGroupServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicGroup_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicGroupServer).Upload(&publicGroupUploadServer{stream})
}

type PublicGroup_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type publicGroupUploadServer struct {
	grpc.ServerStream
}

func (x *publicGroupUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicGroupUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicGroup_GetSubscriptionIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicGroupServer).GetSubscriptionIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publicgroup.PublicGroup/GetSubscriptionIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicGroupServer).GetSubscriptionIDs(ctx, req.(*GetSubscriptionIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicGroup_ServiceDesc is the grpc.ServiceDesc for PublicGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "publicgroup.PublicGroup",
	HandlerType: (*PublicGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _PublicGroup_GetByID_Handler,
		},
		{
			MethodName: "SearchByName",
			Handler:    _PublicGroup_SearchByName_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PublicGroup_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PublicGroup_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PublicGroup_Delete_Handler,
		},
		{
			MethodName: "GetSubscriptionByPublicGroupIDAndSubscriberID",
			Handler:    _PublicGroup_GetSubscriptionByPublicGroupIDAndSubscriberID_Handler,
		},
		{
			MethodName: "GetBySubscriberID",
			Handler:    _PublicGroup_GetBySubscriberID_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _PublicGroup_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _PublicGroup_Unsubscribe_Handler,
		},
		{
			MethodName: "GetSubscriptionIDs",
			Handler:    _PublicGroup_GetSubscriptionIDs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _PublicGroup_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "public_group.proto",
}
