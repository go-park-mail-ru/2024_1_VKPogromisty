// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package csat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CSATClient is the client API for CSAT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSATClient interface {
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error)
	CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*CreatePoolResponse, error)
	UpdatePool(ctx context.Context, in *UpdatePoolRequest, opts ...grpc.CallOption) (*UpdatePoolResponse, error)
	DeletePool(ctx context.Context, in *DeletePoolRequest, opts ...grpc.CallOption) (*DeletePoolResponse, error)
	GetActivePools(ctx context.Context, in *GetActivePoolsRequest, opts ...grpc.CallOption) (*GetActivePoolsResponse, error)
	GetUnansweredQuestionsByPoolID(ctx context.Context, in *GetUnansweredQuestionsByPoolIDRequest, opts ...grpc.CallOption) (*GetUnansweredQuestionsByPoolIDResponse, error)
}

type cSATClient struct {
	cc grpc.ClientConnInterface
}

func NewCSATClient(cc grpc.ClientConnInterface) CSATClient {
	return &cSATClient{cc}
}

func (c *cSATClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, "/csat.CSAT/CreateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSATClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error) {
	out := new(UpdateQuestionResponse)
	err := c.cc.Invoke(ctx, "/csat.CSAT/UpdateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSATClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error) {
	out := new(DeleteQuestionResponse)
	err := c.cc.Invoke(ctx, "/csat.CSAT/DeleteQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSATClient) CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*CreatePoolResponse, error) {
	out := new(CreatePoolResponse)
	err := c.cc.Invoke(ctx, "/csat.CSAT/CreatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSATClient) UpdatePool(ctx context.Context, in *UpdatePoolRequest, opts ...grpc.CallOption) (*UpdatePoolResponse, error) {
	out := new(UpdatePoolResponse)
	err := c.cc.Invoke(ctx, "/csat.CSAT/UpdatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSATClient) DeletePool(ctx context.Context, in *DeletePoolRequest, opts ...grpc.CallOption) (*DeletePoolResponse, error) {
	out := new(DeletePoolResponse)
	err := c.cc.Invoke(ctx, "/csat.CSAT/DeletePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSATClient) GetActivePools(ctx context.Context, in *GetActivePoolsRequest, opts ...grpc.CallOption) (*GetActivePoolsResponse, error) {
	out := new(GetActivePoolsResponse)
	err := c.cc.Invoke(ctx, "/csat.CSAT/GetActivePools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSATClient) GetUnansweredQuestionsByPoolID(ctx context.Context, in *GetUnansweredQuestionsByPoolIDRequest, opts ...grpc.CallOption) (*GetUnansweredQuestionsByPoolIDResponse, error) {
	out := new(GetUnansweredQuestionsByPoolIDResponse)
	err := c.cc.Invoke(ctx, "/csat.CSAT/GetUnansweredQuestionsByPoolID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSATServer is the server API for CSAT service.
// All implementations must embed UnimplementedCSATServer
// for forward compatibility
type CSATServer interface {
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error)
	CreatePool(context.Context, *CreatePoolRequest) (*CreatePoolResponse, error)
	UpdatePool(context.Context, *UpdatePoolRequest) (*UpdatePoolResponse, error)
	DeletePool(context.Context, *DeletePoolRequest) (*DeletePoolResponse, error)
	GetActivePools(context.Context, *GetActivePoolsRequest) (*GetActivePoolsResponse, error)
	GetUnansweredQuestionsByPoolID(context.Context, *GetUnansweredQuestionsByPoolIDRequest) (*GetUnansweredQuestionsByPoolIDResponse, error)
	mustEmbedUnimplementedCSATServer()
}

// UnimplementedCSATServer must be embedded to have forward compatible implementations.
type UnimplementedCSATServer struct {
}

func (UnimplementedCSATServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedCSATServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedCSATServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedCSATServer) CreatePool(context.Context, *CreatePoolRequest) (*CreatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (UnimplementedCSATServer) UpdatePool(context.Context, *UpdatePoolRequest) (*UpdatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePool not implemented")
}
func (UnimplementedCSATServer) DeletePool(context.Context, *DeletePoolRequest) (*DeletePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePool not implemented")
}
func (UnimplementedCSATServer) GetActivePools(context.Context, *GetActivePoolsRequest) (*GetActivePoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePools not implemented")
}
func (UnimplementedCSATServer) GetUnansweredQuestionsByPoolID(context.Context, *GetUnansweredQuestionsByPoolIDRequest) (*GetUnansweredQuestionsByPoolIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnansweredQuestionsByPoolID not implemented")
}
func (UnimplementedCSATServer) mustEmbedUnimplementedCSATServer() {}

// UnsafeCSATServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSATServer will
// result in compilation errors.
type UnsafeCSATServer interface {
	mustEmbedUnimplementedCSATServer()
}

func RegisterCSATServer(s grpc.ServiceRegistrar, srv CSATServer) {
	s.RegisterService(&CSAT_ServiceDesc, srv)
}

func _CSAT_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csat.CSAT/CreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSAT_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csat.CSAT/UpdateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSAT_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csat.CSAT/DeleteQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSAT_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATServer).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csat.CSAT/CreatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATServer).CreatePool(ctx, req.(*CreatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSAT_UpdatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATServer).UpdatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csat.CSAT/UpdatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATServer).UpdatePool(ctx, req.(*UpdatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSAT_DeletePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATServer).DeletePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csat.CSAT/DeletePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATServer).DeletePool(ctx, req.(*DeletePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSAT_GetActivePools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivePoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATServer).GetActivePools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csat.CSAT/GetActivePools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATServer).GetActivePools(ctx, req.(*GetActivePoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSAT_GetUnansweredQuestionsByPoolID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnansweredQuestionsByPoolIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATServer).GetUnansweredQuestionsByPoolID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csat.CSAT/GetUnansweredQuestionsByPoolID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATServer).GetUnansweredQuestionsByPoolID(ctx, req.(*GetUnansweredQuestionsByPoolIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CSAT_ServiceDesc is the grpc.ServiceDesc for CSAT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSAT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "csat.CSAT",
	HandlerType: (*CSATServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _CSAT_CreateQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _CSAT_UpdateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _CSAT_DeleteQuestion_Handler,
		},
		{
			MethodName: "CreatePool",
			Handler:    _CSAT_CreatePool_Handler,
		},
		{
			MethodName: "UpdatePool",
			Handler:    _CSAT_UpdatePool_Handler,
		},
		{
			MethodName: "DeletePool",
			Handler:    _CSAT_DeletePool_Handler,
		},
		{
			MethodName: "GetActivePools",
			Handler:    _CSAT_GetActivePools_Handler,
		},
		{
			MethodName: "GetUnansweredQuestionsByPoolID",
			Handler:    _CSAT_GetUnansweredQuestionsByPoolID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csat.proto",
}
