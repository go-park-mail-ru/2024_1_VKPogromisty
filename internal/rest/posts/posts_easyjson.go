// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package rest

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	domain "socio/domain"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDc9e8747DecodeSocioInternalRestPosts(in *jlexer.Lexer, out *UpdateCommentInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commentId":
			out.CommentID = uint(in.Uint())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioInternalRestPosts(out *jwriter.Writer, in UpdateCommentInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commentId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.CommentID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateCommentInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioInternalRestPosts(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateCommentInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioInternalRestPosts(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateCommentInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioInternalRestPosts(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateCommentInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioInternalRestPosts(l, v)
}
func easyjsonDc9e8747DecodeSocioInternalRestPosts1(in *jlexer.Lexer, out *UnlikePostInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "postId":
			out.PostID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioInternalRestPosts1(out *jwriter.Writer, in UnlikePostInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"postId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.PostID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnlikePostInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioInternalRestPosts1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnlikePostInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioInternalRestPosts1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnlikePostInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioInternalRestPosts1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnlikePostInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioInternalRestPosts1(l, v)
}
func easyjsonDc9e8747DecodeSocioInternalRestPosts2(in *jlexer.Lexer, out *UnlikeCommentInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commentId":
			out.CommentID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioInternalRestPosts2(out *jwriter.Writer, in UnlikeCommentInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commentId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.CommentID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnlikeCommentInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioInternalRestPosts2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnlikeCommentInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioInternalRestPosts2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnlikeCommentInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioInternalRestPosts2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnlikeCommentInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioInternalRestPosts2(l, v)
}
func easyjsonDc9e8747DecodeSocioInternalRestPosts3(in *jlexer.Lexer, out *ListUserPostsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "posts":
			if in.IsNull() {
				in.Skip()
				out.Posts = nil
			} else {
				in.Delim('[')
				if out.Posts == nil {
					if !in.IsDelim(']') {
						out.Posts = make([]*domain.Post, 0, 8)
					} else {
						out.Posts = []*domain.Post{}
					}
				} else {
					out.Posts = (out.Posts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *domain.Post
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(domain.Post)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Posts = append(out.Posts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(domain.User)
				}
				(*out.Author).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioInternalRestPosts3(out *jwriter.Writer, in ListUserPostsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"posts\":"
		out.RawString(prefix[1:])
		if in.Posts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Posts {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		if in.Author == nil {
			out.RawString("null")
		} else {
			(*in.Author).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListUserPostsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioInternalRestPosts3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListUserPostsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioInternalRestPosts3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListUserPostsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioInternalRestPosts3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListUserPostsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioInternalRestPosts3(l, v)
}
func easyjsonDc9e8747DecodeSocioInternalRestPosts4(in *jlexer.Lexer, out *LikePostInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "postId":
			out.PostID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioInternalRestPosts4(out *jwriter.Writer, in LikePostInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"postId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.PostID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LikePostInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioInternalRestPosts4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LikePostInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioInternalRestPosts4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LikePostInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioInternalRestPosts4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LikePostInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioInternalRestPosts4(l, v)
}
func easyjsonDc9e8747DecodeSocioInternalRestPosts5(in *jlexer.Lexer, out *LikeCommentInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commentId":
			out.CommentID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioInternalRestPosts5(out *jwriter.Writer, in LikeCommentInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commentId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.CommentID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LikeCommentInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioInternalRestPosts5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LikeCommentInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioInternalRestPosts5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LikeCommentInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioInternalRestPosts5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LikeCommentInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioInternalRestPosts5(l, v)
}
func easyjsonDc9e8747DecodeSocioInternalRestPosts6(in *jlexer.Lexer, out *DeleteCommentInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commentId":
			out.CommentID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioInternalRestPosts6(out *jwriter.Writer, in DeleteCommentInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commentId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.CommentID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteCommentInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioInternalRestPosts6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteCommentInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioInternalRestPosts6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteCommentInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioInternalRestPosts6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteCommentInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioInternalRestPosts6(l, v)
}
func easyjsonDc9e8747DecodeSocioInternalRestPosts7(in *jlexer.Lexer, out *CreateCommentInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "postId":
			out.PostID = uint(in.Uint())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc9e8747EncodeSocioInternalRestPosts7(out *jwriter.Writer, in CreateCommentInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"postId\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.PostID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateCommentInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc9e8747EncodeSocioInternalRestPosts7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateCommentInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc9e8747EncodeSocioInternalRestPosts7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateCommentInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc9e8747DecodeSocioInternalRestPosts7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateCommentInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc9e8747DecodeSocioInternalRestPosts7(l, v)
}
