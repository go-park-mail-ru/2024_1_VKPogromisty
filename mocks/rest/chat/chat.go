// Code generated by MockGen. DO NOT EDIT.
// Source: internal/rest/chat/chat.go

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"
	domain "socio/domain"
	chat "socio/usecase/chat"

	gomock "github.com/golang/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// CreateSticker mocks base method.
func (m *MockChatService) CreateSticker(ctx context.Context, sticker *domain.Sticker, image *multipart.FileHeader) (*domain.Sticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSticker", ctx, sticker, image)
	ret0, _ := ret[0].(*domain.Sticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSticker indicates an expected call of CreateSticker.
func (mr *MockChatServiceMockRecorder) CreateSticker(ctx, sticker, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSticker", reflect.TypeOf((*MockChatService)(nil).CreateSticker), ctx, sticker, image)
}

// CreateUnsentMessageAttachments mocks base method.
func (m *MockChatService) CreateUnsentMessageAttachments(ctx context.Context, attachs *domain.UnsentMessageAttachment, fhs []*multipart.FileHeader) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnsentMessageAttachments", ctx, attachs, fhs)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUnsentMessageAttachments indicates an expected call of CreateUnsentMessageAttachments.
func (mr *MockChatServiceMockRecorder) CreateUnsentMessageAttachments(ctx, attachs, fhs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnsentMessageAttachments", reflect.TypeOf((*MockChatService)(nil).CreateUnsentMessageAttachments), ctx, attachs, fhs)
}

// DeleteSticker mocks base method.
func (m *MockChatService) DeleteSticker(ctx context.Context, stickerID, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSticker", ctx, stickerID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSticker indicates an expected call of DeleteSticker.
func (mr *MockChatServiceMockRecorder) DeleteSticker(ctx, stickerID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSticker", reflect.TypeOf((*MockChatService)(nil).DeleteSticker), ctx, stickerID, userID)
}

// DeleteUnsentMessageAttachment mocks base method.
func (m *MockChatService) DeleteUnsentMessageAttachment(ctx context.Context, attach *domain.UnsentMessageAttachment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnsentMessageAttachment", ctx, attach)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnsentMessageAttachment indicates an expected call of DeleteUnsentMessageAttachment.
func (mr *MockChatServiceMockRecorder) DeleteUnsentMessageAttachment(ctx, attach interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnsentMessageAttachment", reflect.TypeOf((*MockChatService)(nil).DeleteUnsentMessageAttachment), ctx, attach)
}

// DeleteUnsentMessageAttachments mocks base method.
func (m *MockChatService) DeleteUnsentMessageAttachments(ctx context.Context, attach *domain.UnsentMessageAttachment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnsentMessageAttachments", ctx, attach)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnsentMessageAttachments indicates an expected call of DeleteUnsentMessageAttachments.
func (mr *MockChatServiceMockRecorder) DeleteUnsentMessageAttachments(ctx, attach interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnsentMessageAttachments", reflect.TypeOf((*MockChatService)(nil).DeleteUnsentMessageAttachments), ctx, attach)
}

// GetAllStickers mocks base method.
func (m *MockChatService) GetAllStickers(ctx context.Context) ([]*domain.Sticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStickers", ctx)
	ret0, _ := ret[0].([]*domain.Sticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStickers indicates an expected call of GetAllStickers.
func (mr *MockChatServiceMockRecorder) GetAllStickers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStickers", reflect.TypeOf((*MockChatService)(nil).GetAllStickers), ctx)
}

// GetClient mocks base method.
func (m *MockChatService) GetClient(ctx context.Context, userID uint) (*chat.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, userID)
	ret0, _ := ret[0].(*chat.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockChatServiceMockRecorder) GetClient(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockChatService)(nil).GetClient), ctx, userID)
}

// GetDialogsByUserID mocks base method.
func (m *MockChatService) GetDialogsByUserID(ctx context.Context, userID uint) ([]*domain.Dialog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDialogsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*domain.Dialog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDialogsByUserID indicates an expected call of GetDialogsByUserID.
func (mr *MockChatServiceMockRecorder) GetDialogsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDialogsByUserID", reflect.TypeOf((*MockChatService)(nil).GetDialogsByUserID), ctx, userID)
}

// GetMessagesByDialog mocks base method.
func (m *MockChatService) GetMessagesByDialog(ctx context.Context, userID, peerID, lastMessageID, messagesAmount uint) ([]*domain.PersonalMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByDialog", ctx, userID, peerID, lastMessageID, messagesAmount)
	ret0, _ := ret[0].([]*domain.PersonalMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByDialog indicates an expected call of GetMessagesByDialog.
func (mr *MockChatServiceMockRecorder) GetMessagesByDialog(ctx, userID, peerID, lastMessageID, messagesAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByDialog", reflect.TypeOf((*MockChatService)(nil).GetMessagesByDialog), ctx, userID, peerID, lastMessageID, messagesAmount)
}

// GetStickersByAuthorID mocks base method.
func (m *MockChatService) GetStickersByAuthorID(ctx context.Context, authorID uint) ([]*domain.Sticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStickersByAuthorID", ctx, authorID)
	ret0, _ := ret[0].([]*domain.Sticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStickersByAuthorID indicates an expected call of GetStickersByAuthorID.
func (mr *MockChatServiceMockRecorder) GetStickersByAuthorID(ctx, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStickersByAuthorID", reflect.TypeOf((*MockChatService)(nil).GetStickersByAuthorID), ctx, authorID)
}

// GetUnsentMessageAttachments mocks base method.
func (m *MockChatService) GetUnsentMessageAttachments(ctx context.Context, attach *domain.UnsentMessageAttachment) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsentMessageAttachments", ctx, attach)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsentMessageAttachments indicates an expected call of GetUnsentMessageAttachments.
func (mr *MockChatServiceMockRecorder) GetUnsentMessageAttachments(ctx, attach interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsentMessageAttachments", reflect.TypeOf((*MockChatService)(nil).GetUnsentMessageAttachments), ctx, attach)
}

// Register mocks base method.
func (m *MockChatService) Register(ctx context.Context, userID uint) (*chat.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, userID)
	ret0, _ := ret[0].(*chat.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockChatServiceMockRecorder) Register(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockChatService)(nil).Register), ctx, userID)
}

// Unregister mocks base method.
func (m *MockChatService) Unregister(userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unregister", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister.
func (mr *MockChatServiceMockRecorder) Unregister(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockChatService)(nil).Unregister), userID)
}
