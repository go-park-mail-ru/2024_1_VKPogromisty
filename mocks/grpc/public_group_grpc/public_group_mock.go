// Code generated by MockGen. DO NOT EDIT.
// Source: internal/grpc/public_group/proto/public_group_grpc.pb.go

// Package public_group_grpc is a generated GoMock package.
package public_group_grpc

import (
	context "context"
	reflect "reflect"
	publicgroup "socio/internal/grpc/public_group/proto"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockPublicGroupClient is a mock of PublicGroupClient interface.
type MockPublicGroupClient struct {
	ctrl     *gomock.Controller
	recorder *MockPublicGroupClientMockRecorder
}

// MockPublicGroupClientMockRecorder is the mock recorder for MockPublicGroupClient.
type MockPublicGroupClientMockRecorder struct {
	mock *MockPublicGroupClient
}

// NewMockPublicGroupClient creates a new mock instance.
func NewMockPublicGroupClient(ctrl *gomock.Controller) *MockPublicGroupClient {
	mock := &MockPublicGroupClient{ctrl: ctrl}
	mock.recorder = &MockPublicGroupClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicGroupClient) EXPECT() *MockPublicGroupClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPublicGroupClient) Create(ctx context.Context, in *publicgroup.CreateRequest, opts ...grpc.CallOption) (*publicgroup.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*publicgroup.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPublicGroupClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPublicGroupClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockPublicGroupClient) Delete(ctx context.Context, in *publicgroup.DeleteRequest, opts ...grpc.CallOption) (*publicgroup.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*publicgroup.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPublicGroupClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPublicGroupClient)(nil).Delete), varargs...)
}

// GetByID mocks base method.
func (m *MockPublicGroupClient) GetByID(ctx context.Context, in *publicgroup.GetByIDRequest, opts ...grpc.CallOption) (*publicgroup.GetByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*publicgroup.GetByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPublicGroupClientMockRecorder) GetByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPublicGroupClient)(nil).GetByID), varargs...)
}

// GetBySubscriberID mocks base method.
func (m *MockPublicGroupClient) GetBySubscriberID(ctx context.Context, in *publicgroup.GetBySubscriberIDRequest, opts ...grpc.CallOption) (*publicgroup.GetBySubscriberIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBySubscriberID", varargs...)
	ret0, _ := ret[0].(*publicgroup.GetBySubscriberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySubscriberID indicates an expected call of GetBySubscriberID.
func (mr *MockPublicGroupClientMockRecorder) GetBySubscriberID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySubscriberID", reflect.TypeOf((*MockPublicGroupClient)(nil).GetBySubscriberID), varargs...)
}

// GetSubscriptionByPublicGroupIDAndSubscriberID mocks base method.
func (m *MockPublicGroupClient) GetSubscriptionByPublicGroupIDAndSubscriberID(ctx context.Context, in *publicgroup.GetSubscriptionByPublicGroupIDAndSubscriberIDRequest, opts ...grpc.CallOption) (*publicgroup.GetSubscriptionByPublicGroupIDAndSubscriberIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionByPublicGroupIDAndSubscriberID", varargs...)
	ret0, _ := ret[0].(*publicgroup.GetSubscriptionByPublicGroupIDAndSubscriberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionByPublicGroupIDAndSubscriberID indicates an expected call of GetSubscriptionByPublicGroupIDAndSubscriberID.
func (mr *MockPublicGroupClientMockRecorder) GetSubscriptionByPublicGroupIDAndSubscriberID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionByPublicGroupIDAndSubscriberID", reflect.TypeOf((*MockPublicGroupClient)(nil).GetSubscriptionByPublicGroupIDAndSubscriberID), varargs...)
}

// GetSubscriptionIDs mocks base method.
func (m *MockPublicGroupClient) GetSubscriptionIDs(ctx context.Context, in *publicgroup.GetSubscriptionIDsRequest, opts ...grpc.CallOption) (*publicgroup.GetSubscriptionIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionIDs", varargs...)
	ret0, _ := ret[0].(*publicgroup.GetSubscriptionIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionIDs indicates an expected call of GetSubscriptionIDs.
func (mr *MockPublicGroupClientMockRecorder) GetSubscriptionIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionIDs", reflect.TypeOf((*MockPublicGroupClient)(nil).GetSubscriptionIDs), varargs...)
}

// SearchByName mocks base method.
func (m *MockPublicGroupClient) SearchByName(ctx context.Context, in *publicgroup.SearchByNameRequest, opts ...grpc.CallOption) (*publicgroup.SearchByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchByName", varargs...)
	ret0, _ := ret[0].(*publicgroup.SearchByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockPublicGroupClientMockRecorder) SearchByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockPublicGroupClient)(nil).SearchByName), varargs...)
}

// Subscribe mocks base method.
func (m *MockPublicGroupClient) Subscribe(ctx context.Context, in *publicgroup.SubscribeRequest, opts ...grpc.CallOption) (*publicgroup.SubscribeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*publicgroup.SubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPublicGroupClientMockRecorder) Subscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPublicGroupClient)(nil).Subscribe), varargs...)
}

// Unsubscribe mocks base method.
func (m *MockPublicGroupClient) Unsubscribe(ctx context.Context, in *publicgroup.UnsubscribeRequest, opts ...grpc.CallOption) (*publicgroup.UnsubscribeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unsubscribe", varargs...)
	ret0, _ := ret[0].(*publicgroup.UnsubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockPublicGroupClientMockRecorder) Unsubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockPublicGroupClient)(nil).Unsubscribe), varargs...)
}

// Update mocks base method.
func (m *MockPublicGroupClient) Update(ctx context.Context, in *publicgroup.UpdateRequest, opts ...grpc.CallOption) (*publicgroup.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*publicgroup.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPublicGroupClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPublicGroupClient)(nil).Update), varargs...)
}

// Upload mocks base method.
func (m *MockPublicGroupClient) Upload(ctx context.Context, opts ...grpc.CallOption) (publicgroup.PublicGroup_UploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upload", varargs...)
	ret0, _ := ret[0].(publicgroup.PublicGroup_UploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockPublicGroupClientMockRecorder) Upload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockPublicGroupClient)(nil).Upload), varargs...)
}

// MockPublicGroup_UploadClient is a mock of PublicGroup_UploadClient interface.
type MockPublicGroup_UploadClient struct {
	ctrl     *gomock.Controller
	recorder *MockPublicGroup_UploadClientMockRecorder
}

// MockPublicGroup_UploadClientMockRecorder is the mock recorder for MockPublicGroup_UploadClient.
type MockPublicGroup_UploadClientMockRecorder struct {
	mock *MockPublicGroup_UploadClient
}

// NewMockPublicGroup_UploadClient creates a new mock instance.
func NewMockPublicGroup_UploadClient(ctrl *gomock.Controller) *MockPublicGroup_UploadClient {
	mock := &MockPublicGroup_UploadClient{ctrl: ctrl}
	mock.recorder = &MockPublicGroup_UploadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicGroup_UploadClient) EXPECT() *MockPublicGroup_UploadClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockPublicGroup_UploadClient) CloseAndRecv() (*publicgroup.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*publicgroup.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockPublicGroup_UploadClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockPublicGroup_UploadClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockPublicGroup_UploadClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPublicGroup_UploadClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPublicGroup_UploadClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPublicGroup_UploadClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPublicGroup_UploadClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPublicGroup_UploadClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPublicGroup_UploadClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPublicGroup_UploadClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPublicGroup_UploadClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockPublicGroup_UploadClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPublicGroup_UploadClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPublicGroup_UploadClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPublicGroup_UploadClient) Send(arg0 *publicgroup.UploadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPublicGroup_UploadClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPublicGroup_UploadClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPublicGroup_UploadClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPublicGroup_UploadClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPublicGroup_UploadClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPublicGroup_UploadClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPublicGroup_UploadClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPublicGroup_UploadClient)(nil).Trailer))
}

// MockPublicGroupServer is a mock of PublicGroupServer interface.
type MockPublicGroupServer struct {
	ctrl     *gomock.Controller
	recorder *MockPublicGroupServerMockRecorder
}

// MockPublicGroupServerMockRecorder is the mock recorder for MockPublicGroupServer.
type MockPublicGroupServerMockRecorder struct {
	mock *MockPublicGroupServer
}

// NewMockPublicGroupServer creates a new mock instance.
func NewMockPublicGroupServer(ctrl *gomock.Controller) *MockPublicGroupServer {
	mock := &MockPublicGroupServer{ctrl: ctrl}
	mock.recorder = &MockPublicGroupServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicGroupServer) EXPECT() *MockPublicGroupServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPublicGroupServer) Create(arg0 context.Context, arg1 *publicgroup.CreateRequest) (*publicgroup.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*publicgroup.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPublicGroupServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPublicGroupServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPublicGroupServer) Delete(arg0 context.Context, arg1 *publicgroup.DeleteRequest) (*publicgroup.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*publicgroup.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPublicGroupServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPublicGroupServer)(nil).Delete), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockPublicGroupServer) GetByID(arg0 context.Context, arg1 *publicgroup.GetByIDRequest) (*publicgroup.GetByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*publicgroup.GetByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPublicGroupServerMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPublicGroupServer)(nil).GetByID), arg0, arg1)
}

// GetBySubscriberID mocks base method.
func (m *MockPublicGroupServer) GetBySubscriberID(arg0 context.Context, arg1 *publicgroup.GetBySubscriberIDRequest) (*publicgroup.GetBySubscriberIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySubscriberID", arg0, arg1)
	ret0, _ := ret[0].(*publicgroup.GetBySubscriberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySubscriberID indicates an expected call of GetBySubscriberID.
func (mr *MockPublicGroupServerMockRecorder) GetBySubscriberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySubscriberID", reflect.TypeOf((*MockPublicGroupServer)(nil).GetBySubscriberID), arg0, arg1)
}

// GetSubscriptionByPublicGroupIDAndSubscriberID mocks base method.
func (m *MockPublicGroupServer) GetSubscriptionByPublicGroupIDAndSubscriberID(arg0 context.Context, arg1 *publicgroup.GetSubscriptionByPublicGroupIDAndSubscriberIDRequest) (*publicgroup.GetSubscriptionByPublicGroupIDAndSubscriberIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionByPublicGroupIDAndSubscriberID", arg0, arg1)
	ret0, _ := ret[0].(*publicgroup.GetSubscriptionByPublicGroupIDAndSubscriberIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionByPublicGroupIDAndSubscriberID indicates an expected call of GetSubscriptionByPublicGroupIDAndSubscriberID.
func (mr *MockPublicGroupServerMockRecorder) GetSubscriptionByPublicGroupIDAndSubscriberID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionByPublicGroupIDAndSubscriberID", reflect.TypeOf((*MockPublicGroupServer)(nil).GetSubscriptionByPublicGroupIDAndSubscriberID), arg0, arg1)
}

// GetSubscriptionIDs mocks base method.
func (m *MockPublicGroupServer) GetSubscriptionIDs(arg0 context.Context, arg1 *publicgroup.GetSubscriptionIDsRequest) (*publicgroup.GetSubscriptionIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionIDs", arg0, arg1)
	ret0, _ := ret[0].(*publicgroup.GetSubscriptionIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionIDs indicates an expected call of GetSubscriptionIDs.
func (mr *MockPublicGroupServerMockRecorder) GetSubscriptionIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionIDs", reflect.TypeOf((*MockPublicGroupServer)(nil).GetSubscriptionIDs), arg0, arg1)
}

// SearchByName mocks base method.
func (m *MockPublicGroupServer) SearchByName(arg0 context.Context, arg1 *publicgroup.SearchByNameRequest) (*publicgroup.SearchByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", arg0, arg1)
	ret0, _ := ret[0].(*publicgroup.SearchByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockPublicGroupServerMockRecorder) SearchByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockPublicGroupServer)(nil).SearchByName), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockPublicGroupServer) Subscribe(arg0 context.Context, arg1 *publicgroup.SubscribeRequest) (*publicgroup.SubscribeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(*publicgroup.SubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPublicGroupServerMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPublicGroupServer)(nil).Subscribe), arg0, arg1)
}

// Unsubscribe mocks base method.
func (m *MockPublicGroupServer) Unsubscribe(arg0 context.Context, arg1 *publicgroup.UnsubscribeRequest) (*publicgroup.UnsubscribeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0, arg1)
	ret0, _ := ret[0].(*publicgroup.UnsubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockPublicGroupServerMockRecorder) Unsubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockPublicGroupServer)(nil).Unsubscribe), arg0, arg1)
}

// Update mocks base method.
func (m *MockPublicGroupServer) Update(arg0 context.Context, arg1 *publicgroup.UpdateRequest) (*publicgroup.UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*publicgroup.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPublicGroupServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPublicGroupServer)(nil).Update), arg0, arg1)
}

// Upload mocks base method.
func (m *MockPublicGroupServer) Upload(arg0 publicgroup.PublicGroup_UploadServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockPublicGroupServerMockRecorder) Upload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockPublicGroupServer)(nil).Upload), arg0)
}

// mustEmbedUnimplementedPublicGroupServer mocks base method.
func (m *MockPublicGroupServer) mustEmbedUnimplementedPublicGroupServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPublicGroupServer")
}

// mustEmbedUnimplementedPublicGroupServer indicates an expected call of mustEmbedUnimplementedPublicGroupServer.
func (mr *MockPublicGroupServerMockRecorder) mustEmbedUnimplementedPublicGroupServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPublicGroupServer", reflect.TypeOf((*MockPublicGroupServer)(nil).mustEmbedUnimplementedPublicGroupServer))
}

// MockUnsafePublicGroupServer is a mock of UnsafePublicGroupServer interface.
type MockUnsafePublicGroupServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePublicGroupServerMockRecorder
}

// MockUnsafePublicGroupServerMockRecorder is the mock recorder for MockUnsafePublicGroupServer.
type MockUnsafePublicGroupServerMockRecorder struct {
	mock *MockUnsafePublicGroupServer
}

// NewMockUnsafePublicGroupServer creates a new mock instance.
func NewMockUnsafePublicGroupServer(ctrl *gomock.Controller) *MockUnsafePublicGroupServer {
	mock := &MockUnsafePublicGroupServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePublicGroupServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePublicGroupServer) EXPECT() *MockUnsafePublicGroupServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPublicGroupServer mocks base method.
func (m *MockUnsafePublicGroupServer) mustEmbedUnimplementedPublicGroupServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPublicGroupServer")
}

// mustEmbedUnimplementedPublicGroupServer indicates an expected call of mustEmbedUnimplementedPublicGroupServer.
func (mr *MockUnsafePublicGroupServerMockRecorder) mustEmbedUnimplementedPublicGroupServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPublicGroupServer", reflect.TypeOf((*MockUnsafePublicGroupServer)(nil).mustEmbedUnimplementedPublicGroupServer))
}

// MockPublicGroup_UploadServer is a mock of PublicGroup_UploadServer interface.
type MockPublicGroup_UploadServer struct {
	ctrl     *gomock.Controller
	recorder *MockPublicGroup_UploadServerMockRecorder
}

// MockPublicGroup_UploadServerMockRecorder is the mock recorder for MockPublicGroup_UploadServer.
type MockPublicGroup_UploadServerMockRecorder struct {
	mock *MockPublicGroup_UploadServer
}

// NewMockPublicGroup_UploadServer creates a new mock instance.
func NewMockPublicGroup_UploadServer(ctrl *gomock.Controller) *MockPublicGroup_UploadServer {
	mock := &MockPublicGroup_UploadServer{ctrl: ctrl}
	mock.recorder = &MockPublicGroup_UploadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicGroup_UploadServer) EXPECT() *MockPublicGroup_UploadServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPublicGroup_UploadServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPublicGroup_UploadServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPublicGroup_UploadServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockPublicGroup_UploadServer) Recv() (*publicgroup.UploadRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*publicgroup.UploadRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPublicGroup_UploadServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPublicGroup_UploadServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPublicGroup_UploadServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPublicGroup_UploadServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPublicGroup_UploadServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockPublicGroup_UploadServer) SendAndClose(arg0 *publicgroup.UploadResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockPublicGroup_UploadServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockPublicGroup_UploadServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockPublicGroup_UploadServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPublicGroup_UploadServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPublicGroup_UploadServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPublicGroup_UploadServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPublicGroup_UploadServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPublicGroup_UploadServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPublicGroup_UploadServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPublicGroup_UploadServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPublicGroup_UploadServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPublicGroup_UploadServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPublicGroup_UploadServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPublicGroup_UploadServer)(nil).SetTrailer), arg0)
}
