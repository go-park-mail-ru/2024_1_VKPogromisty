// Code generated by MockGen. DO NOT EDIT.
// Source: internal/grpc/user/proto/user_grpc.pb.go

// Package user_grpc is a generated GoMock package.
package user_grpc

import (
	context "context"
	reflect "reflect"
	user "socio/internal/grpc/user/proto"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockUserClient is a mock of UserClient interface.
type MockUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientMockRecorder
}

// MockUserClientMockRecorder is the mock recorder for MockUserClient.
type MockUserClientMockRecorder struct {
	mock *MockUserClient
}

// NewMockUserClient creates a new mock instance.
func NewMockUserClient(ctrl *gomock.Controller) *MockUserClient {
	mock := &MockUserClient{ctrl: ctrl}
	mock.recorder = &MockUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserClient) EXPECT() *MockUserClientMockRecorder {
	return m.recorder
}

// CheckIfUserIsAdmin mocks base method.
func (m *MockUserClient) CheckIfUserIsAdmin(ctx context.Context, in *user.CheckIfUserIsAdminRequest, opts ...grpc.CallOption) (*user.CheckIfUserIsAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckIfUserIsAdmin", varargs...)
	ret0, _ := ret[0].(*user.CheckIfUserIsAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfUserIsAdmin indicates an expected call of CheckIfUserIsAdmin.
func (mr *MockUserClientMockRecorder) CheckIfUserIsAdmin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfUserIsAdmin", reflect.TypeOf((*MockUserClient)(nil).CheckIfUserIsAdmin), varargs...)
}

// Create mocks base method.
func (m *MockUserClient) Create(ctx context.Context, in *user.CreateRequest, opts ...grpc.CallOption) (*user.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*user.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserClient)(nil).Create), varargs...)
}

// CreatePublicGroupAdmin mocks base method.
func (m *MockUserClient) CreatePublicGroupAdmin(ctx context.Context, in *user.CreatePublicGroupAdminRequest, opts ...grpc.CallOption) (*user.CreatePublicGroupAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePublicGroupAdmin", varargs...)
	ret0, _ := ret[0].(*user.CreatePublicGroupAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublicGroupAdmin indicates an expected call of CreatePublicGroupAdmin.
func (mr *MockUserClientMockRecorder) CreatePublicGroupAdmin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicGroupAdmin", reflect.TypeOf((*MockUserClient)(nil).CreatePublicGroupAdmin), varargs...)
}

// Delete mocks base method.
func (m *MockUserClient) Delete(ctx context.Context, in *user.DeleteRequest, opts ...grpc.CallOption) (*user.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*user.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserClient)(nil).Delete), varargs...)
}

// DeletePublicGroupAdmin mocks base method.
func (m *MockUserClient) DeletePublicGroupAdmin(ctx context.Context, in *user.DeletePublicGroupAdminRequest, opts ...grpc.CallOption) (*user.DeletePublicGroupAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePublicGroupAdmin", varargs...)
	ret0, _ := ret[0].(*user.DeletePublicGroupAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePublicGroupAdmin indicates an expected call of DeletePublicGroupAdmin.
func (mr *MockUserClientMockRecorder) DeletePublicGroupAdmin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicGroupAdmin", reflect.TypeOf((*MockUserClient)(nil).DeletePublicGroupAdmin), varargs...)
}

// GetAdminsByPublicGroupID mocks base method.
func (m *MockUserClient) GetAdminsByPublicGroupID(ctx context.Context, in *user.GetAdminsByPublicGroupIDRequest, opts ...grpc.CallOption) (*user.GetAdminsByPublicGroupIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAdminsByPublicGroupID", varargs...)
	ret0, _ := ret[0].(*user.GetAdminsByPublicGroupIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminsByPublicGroupID indicates an expected call of GetAdminsByPublicGroupID.
func (mr *MockUserClientMockRecorder) GetAdminsByPublicGroupID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminsByPublicGroupID", reflect.TypeOf((*MockUserClient)(nil).GetAdminsByPublicGroupID), varargs...)
}

// GetByEmail mocks base method.
func (m *MockUserClient) GetByEmail(ctx context.Context, in *user.GetByEmailRequest, opts ...grpc.CallOption) (*user.GetByEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByEmail", varargs...)
	ret0, _ := ret[0].(*user.GetByEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserClientMockRecorder) GetByEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserClient)(nil).GetByEmail), varargs...)
}

// GetByID mocks base method.
func (m *MockUserClient) GetByID(ctx context.Context, in *user.GetByIDRequest, opts ...grpc.CallOption) (*user.GetByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByID", varargs...)
	ret0, _ := ret[0].(*user.GetByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserClientMockRecorder) GetByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserClient)(nil).GetByID), varargs...)
}

// GetByIDWithSubsInfo mocks base method.
func (m *MockUserClient) GetByIDWithSubsInfo(ctx context.Context, in *user.GetByIDWithSubsInfoRequest, opts ...grpc.CallOption) (*user.GetByIDWithSubsInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIDWithSubsInfo", varargs...)
	ret0, _ := ret[0].(*user.GetByIDWithSubsInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDWithSubsInfo indicates an expected call of GetByIDWithSubsInfo.
func (mr *MockUserClientMockRecorder) GetByIDWithSubsInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithSubsInfo", reflect.TypeOf((*MockUserClient)(nil).GetByIDWithSubsInfo), varargs...)
}

// GetFriends mocks base method.
func (m *MockUserClient) GetFriends(ctx context.Context, in *user.GetFriendsRequest, opts ...grpc.CallOption) (*user.GetFriendsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFriends", varargs...)
	ret0, _ := ret[0].(*user.GetFriendsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriends indicates an expected call of GetFriends.
func (mr *MockUserClientMockRecorder) GetFriends(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriends", reflect.TypeOf((*MockUserClient)(nil).GetFriends), varargs...)
}

// GetSubscribers mocks base method.
func (m *MockUserClient) GetSubscribers(ctx context.Context, in *user.GetSubscribersRequest, opts ...grpc.CallOption) (*user.GetSubscribersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscribers", varargs...)
	ret0, _ := ret[0].(*user.GetSubscribersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers.
func (mr *MockUserClientMockRecorder) GetSubscribers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*MockUserClient)(nil).GetSubscribers), varargs...)
}

// GetSubscriptionIDs mocks base method.
func (m *MockUserClient) GetSubscriptionIDs(ctx context.Context, in *user.GetSubscriptionIDsRequest, opts ...grpc.CallOption) (*user.GetSubscriptionIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptionIDs", varargs...)
	ret0, _ := ret[0].(*user.GetSubscriptionIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionIDs indicates an expected call of GetSubscriptionIDs.
func (mr *MockUserClientMockRecorder) GetSubscriptionIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionIDs", reflect.TypeOf((*MockUserClient)(nil).GetSubscriptionIDs), varargs...)
}

// GetSubscriptions mocks base method.
func (m *MockUserClient) GetSubscriptions(ctx context.Context, in *user.GetSubscriptionsRequest, opts ...grpc.CallOption) (*user.GetSubscriptionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptions", varargs...)
	ret0, _ := ret[0].(*user.GetSubscriptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions.
func (mr *MockUserClientMockRecorder) GetSubscriptions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockUserClient)(nil).GetSubscriptions), varargs...)
}

// SearchByName mocks base method.
func (m *MockUserClient) SearchByName(ctx context.Context, in *user.SearchByNameRequest, opts ...grpc.CallOption) (*user.SearchByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchByName", varargs...)
	ret0, _ := ret[0].(*user.SearchByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockUserClientMockRecorder) SearchByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockUserClient)(nil).SearchByName), varargs...)
}

// Subscribe mocks base method.
func (m *MockUserClient) Subscribe(ctx context.Context, in *user.SubscribeRequest, opts ...grpc.CallOption) (*user.SubscribeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*user.SubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockUserClientMockRecorder) Subscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockUserClient)(nil).Subscribe), varargs...)
}

// Unsubscribe mocks base method.
func (m *MockUserClient) Unsubscribe(ctx context.Context, in *user.UnsubscribeRequest, opts ...grpc.CallOption) (*user.UnsubscribeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unsubscribe", varargs...)
	ret0, _ := ret[0].(*user.UnsubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockUserClientMockRecorder) Unsubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockUserClient)(nil).Unsubscribe), varargs...)
}

// Update mocks base method.
func (m *MockUserClient) Update(ctx context.Context, in *user.UpdateRequest, opts ...grpc.CallOption) (*user.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*user.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserClient)(nil).Update), varargs...)
}

// Upload mocks base method.
func (m *MockUserClient) Upload(ctx context.Context, opts ...grpc.CallOption) (user.User_UploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upload", varargs...)
	ret0, _ := ret[0].(user.User_UploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockUserClientMockRecorder) Upload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockUserClient)(nil).Upload), varargs...)
}

// MockUser_UploadClient is a mock of User_UploadClient interface.
type MockUser_UploadClient struct {
	ctrl     *gomock.Controller
	recorder *MockUser_UploadClientMockRecorder
}

// MockUser_UploadClientMockRecorder is the mock recorder for MockUser_UploadClient.
type MockUser_UploadClientMockRecorder struct {
	mock *MockUser_UploadClient
}

// NewMockUser_UploadClient creates a new mock instance.
func NewMockUser_UploadClient(ctrl *gomock.Controller) *MockUser_UploadClient {
	mock := &MockUser_UploadClient{ctrl: ctrl}
	mock.recorder = &MockUser_UploadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser_UploadClient) EXPECT() *MockUser_UploadClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockUser_UploadClient) CloseAndRecv() (*user.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*user.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockUser_UploadClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockUser_UploadClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockUser_UploadClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockUser_UploadClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockUser_UploadClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockUser_UploadClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockUser_UploadClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockUser_UploadClient)(nil).Context))
}

// Header mocks base method.
func (m *MockUser_UploadClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockUser_UploadClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockUser_UploadClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockUser_UploadClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockUser_UploadClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockUser_UploadClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockUser_UploadClient) Send(arg0 *user.UploadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockUser_UploadClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockUser_UploadClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockUser_UploadClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockUser_UploadClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockUser_UploadClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockUser_UploadClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockUser_UploadClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockUser_UploadClient)(nil).Trailer))
}

// MockUserServer is a mock of UserServer interface.
type MockUserServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServerMockRecorder
}

// MockUserServerMockRecorder is the mock recorder for MockUserServer.
type MockUserServerMockRecorder struct {
	mock *MockUserServer
}

// NewMockUserServer creates a new mock instance.
func NewMockUserServer(ctrl *gomock.Controller) *MockUserServer {
	mock := &MockUserServer{ctrl: ctrl}
	mock.recorder = &MockUserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServer) EXPECT() *MockUserServerMockRecorder {
	return m.recorder
}

// CheckIfUserIsAdmin mocks base method.
func (m *MockUserServer) CheckIfUserIsAdmin(arg0 context.Context, arg1 *user.CheckIfUserIsAdminRequest) (*user.CheckIfUserIsAdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfUserIsAdmin", arg0, arg1)
	ret0, _ := ret[0].(*user.CheckIfUserIsAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfUserIsAdmin indicates an expected call of CheckIfUserIsAdmin.
func (mr *MockUserServerMockRecorder) CheckIfUserIsAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfUserIsAdmin", reflect.TypeOf((*MockUserServer)(nil).CheckIfUserIsAdmin), arg0, arg1)
}

// Create mocks base method.
func (m *MockUserServer) Create(arg0 context.Context, arg1 *user.CreateRequest) (*user.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*user.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserServer)(nil).Create), arg0, arg1)
}

// CreatePublicGroupAdmin mocks base method.
func (m *MockUserServer) CreatePublicGroupAdmin(arg0 context.Context, arg1 *user.CreatePublicGroupAdminRequest) (*user.CreatePublicGroupAdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicGroupAdmin", arg0, arg1)
	ret0, _ := ret[0].(*user.CreatePublicGroupAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublicGroupAdmin indicates an expected call of CreatePublicGroupAdmin.
func (mr *MockUserServerMockRecorder) CreatePublicGroupAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicGroupAdmin", reflect.TypeOf((*MockUserServer)(nil).CreatePublicGroupAdmin), arg0, arg1)
}

// Delete mocks base method.
func (m *MockUserServer) Delete(arg0 context.Context, arg1 *user.DeleteRequest) (*user.DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*user.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserServer)(nil).Delete), arg0, arg1)
}

// DeletePublicGroupAdmin mocks base method.
func (m *MockUserServer) DeletePublicGroupAdmin(arg0 context.Context, arg1 *user.DeletePublicGroupAdminRequest) (*user.DeletePublicGroupAdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicGroupAdmin", arg0, arg1)
	ret0, _ := ret[0].(*user.DeletePublicGroupAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePublicGroupAdmin indicates an expected call of DeletePublicGroupAdmin.
func (mr *MockUserServerMockRecorder) DeletePublicGroupAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicGroupAdmin", reflect.TypeOf((*MockUserServer)(nil).DeletePublicGroupAdmin), arg0, arg1)
}

// GetAdminsByPublicGroupID mocks base method.
func (m *MockUserServer) GetAdminsByPublicGroupID(arg0 context.Context, arg1 *user.GetAdminsByPublicGroupIDRequest) (*user.GetAdminsByPublicGroupIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminsByPublicGroupID", arg0, arg1)
	ret0, _ := ret[0].(*user.GetAdminsByPublicGroupIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminsByPublicGroupID indicates an expected call of GetAdminsByPublicGroupID.
func (mr *MockUserServerMockRecorder) GetAdminsByPublicGroupID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminsByPublicGroupID", reflect.TypeOf((*MockUserServer)(nil).GetAdminsByPublicGroupID), arg0, arg1)
}

// GetByEmail mocks base method.
func (m *MockUserServer) GetByEmail(arg0 context.Context, arg1 *user.GetByEmailRequest) (*user.GetByEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.GetByEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserServerMockRecorder) GetByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserServer)(nil).GetByEmail), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockUserServer) GetByID(arg0 context.Context, arg1 *user.GetByIDRequest) (*user.GetByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*user.GetByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserServerMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserServer)(nil).GetByID), arg0, arg1)
}

// GetByIDWithSubsInfo mocks base method.
func (m *MockUserServer) GetByIDWithSubsInfo(arg0 context.Context, arg1 *user.GetByIDWithSubsInfoRequest) (*user.GetByIDWithSubsInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithSubsInfo", arg0, arg1)
	ret0, _ := ret[0].(*user.GetByIDWithSubsInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDWithSubsInfo indicates an expected call of GetByIDWithSubsInfo.
func (mr *MockUserServerMockRecorder) GetByIDWithSubsInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithSubsInfo", reflect.TypeOf((*MockUserServer)(nil).GetByIDWithSubsInfo), arg0, arg1)
}

// GetFriends mocks base method.
func (m *MockUserServer) GetFriends(arg0 context.Context, arg1 *user.GetFriendsRequest) (*user.GetFriendsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriends", arg0, arg1)
	ret0, _ := ret[0].(*user.GetFriendsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriends indicates an expected call of GetFriends.
func (mr *MockUserServerMockRecorder) GetFriends(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriends", reflect.TypeOf((*MockUserServer)(nil).GetFriends), arg0, arg1)
}

// GetSubscribers mocks base method.
func (m *MockUserServer) GetSubscribers(arg0 context.Context, arg1 *user.GetSubscribersRequest) (*user.GetSubscribersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribers", arg0, arg1)
	ret0, _ := ret[0].(*user.GetSubscribersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers.
func (mr *MockUserServerMockRecorder) GetSubscribers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*MockUserServer)(nil).GetSubscribers), arg0, arg1)
}

// GetSubscriptionIDs mocks base method.
func (m *MockUserServer) GetSubscriptionIDs(arg0 context.Context, arg1 *user.GetSubscriptionIDsRequest) (*user.GetSubscriptionIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionIDs", arg0, arg1)
	ret0, _ := ret[0].(*user.GetSubscriptionIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionIDs indicates an expected call of GetSubscriptionIDs.
func (mr *MockUserServerMockRecorder) GetSubscriptionIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionIDs", reflect.TypeOf((*MockUserServer)(nil).GetSubscriptionIDs), arg0, arg1)
}

// GetSubscriptions mocks base method.
func (m *MockUserServer) GetSubscriptions(arg0 context.Context, arg1 *user.GetSubscriptionsRequest) (*user.GetSubscriptionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptions", arg0, arg1)
	ret0, _ := ret[0].(*user.GetSubscriptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions.
func (mr *MockUserServerMockRecorder) GetSubscriptions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockUserServer)(nil).GetSubscriptions), arg0, arg1)
}

// SearchByName mocks base method.
func (m *MockUserServer) SearchByName(arg0 context.Context, arg1 *user.SearchByNameRequest) (*user.SearchByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", arg0, arg1)
	ret0, _ := ret[0].(*user.SearchByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockUserServerMockRecorder) SearchByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockUserServer)(nil).SearchByName), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockUserServer) Subscribe(arg0 context.Context, arg1 *user.SubscribeRequest) (*user.SubscribeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(*user.SubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockUserServerMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockUserServer)(nil).Subscribe), arg0, arg1)
}

// Unsubscribe mocks base method.
func (m *MockUserServer) Unsubscribe(arg0 context.Context, arg1 *user.UnsubscribeRequest) (*user.UnsubscribeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0, arg1)
	ret0, _ := ret[0].(*user.UnsubscribeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockUserServerMockRecorder) Unsubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockUserServer)(nil).Unsubscribe), arg0, arg1)
}

// Update mocks base method.
func (m *MockUserServer) Update(arg0 context.Context, arg1 *user.UpdateRequest) (*user.UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*user.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserServer)(nil).Update), arg0, arg1)
}

// Upload mocks base method.
func (m *MockUserServer) Upload(arg0 user.User_UploadServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockUserServerMockRecorder) Upload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockUserServer)(nil).Upload), arg0)
}

// mustEmbedUnimplementedUserServer mocks base method.
func (m *MockUserServer) mustEmbedUnimplementedUserServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServer")
}

// mustEmbedUnimplementedUserServer indicates an expected call of mustEmbedUnimplementedUserServer.
func (mr *MockUserServerMockRecorder) mustEmbedUnimplementedUserServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServer", reflect.TypeOf((*MockUserServer)(nil).mustEmbedUnimplementedUserServer))
}

// MockUnsafeUserServer is a mock of UnsafeUserServer interface.
type MockUnsafeUserServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServerMockRecorder
}

// MockUnsafeUserServerMockRecorder is the mock recorder for MockUnsafeUserServer.
type MockUnsafeUserServerMockRecorder struct {
	mock *MockUnsafeUserServer
}

// NewMockUnsafeUserServer creates a new mock instance.
func NewMockUnsafeUserServer(ctrl *gomock.Controller) *MockUnsafeUserServer {
	mock := &MockUnsafeUserServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServer) EXPECT() *MockUnsafeUserServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServer mocks base method.
func (m *MockUnsafeUserServer) mustEmbedUnimplementedUserServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServer")
}

// mustEmbedUnimplementedUserServer indicates an expected call of mustEmbedUnimplementedUserServer.
func (mr *MockUnsafeUserServerMockRecorder) mustEmbedUnimplementedUserServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServer", reflect.TypeOf((*MockUnsafeUserServer)(nil).mustEmbedUnimplementedUserServer))
}

// MockUser_UploadServer is a mock of User_UploadServer interface.
type MockUser_UploadServer struct {
	ctrl     *gomock.Controller
	recorder *MockUser_UploadServerMockRecorder
}

// MockUser_UploadServerMockRecorder is the mock recorder for MockUser_UploadServer.
type MockUser_UploadServerMockRecorder struct {
	mock *MockUser_UploadServer
}

// NewMockUser_UploadServer creates a new mock instance.
func NewMockUser_UploadServer(ctrl *gomock.Controller) *MockUser_UploadServer {
	mock := &MockUser_UploadServer{ctrl: ctrl}
	mock.recorder = &MockUser_UploadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser_UploadServer) EXPECT() *MockUser_UploadServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockUser_UploadServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockUser_UploadServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockUser_UploadServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockUser_UploadServer) Recv() (*user.UploadRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*user.UploadRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockUser_UploadServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockUser_UploadServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockUser_UploadServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockUser_UploadServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockUser_UploadServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockUser_UploadServer) SendAndClose(arg0 *user.UploadResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockUser_UploadServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockUser_UploadServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockUser_UploadServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockUser_UploadServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockUser_UploadServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockUser_UploadServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockUser_UploadServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockUser_UploadServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockUser_UploadServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockUser_UploadServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockUser_UploadServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockUser_UploadServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockUser_UploadServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockUser_UploadServer)(nil).SetTrailer), arg0)
}
