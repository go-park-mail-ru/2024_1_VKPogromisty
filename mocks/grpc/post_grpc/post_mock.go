// Code generated by MockGen. DO NOT EDIT.
// Source: internal/grpc/post/proto/post_grpc.pb.go

// Package post_grpc is a generated GoMock package.
package post_grpc

import (
	context "context"
	reflect "reflect"
	post "socio/internal/grpc/post/proto"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockPostClient is a mock of PostClient interface.
type MockPostClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostClientMockRecorder
}

// MockPostClientMockRecorder is the mock recorder for MockPostClient.
type MockPostClientMockRecorder struct {
	mock *MockPostClient
}

// NewMockPostClient creates a new mock instance.
func NewMockPostClient(ctrl *gomock.Controller) *MockPostClient {
	mock := &MockPostClient{ctrl: ctrl}
	mock.recorder = &MockPostClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostClient) EXPECT() *MockPostClientMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockPostClient) CreateComment(ctx context.Context, in *post.CreateCommentRequest, opts ...grpc.CallOption) (*post.CreateCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateComment", varargs...)
	ret0, _ := ret[0].(*post.CreateCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockPostClientMockRecorder) CreateComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockPostClient)(nil).CreateComment), varargs...)
}

// CreateGroupPost mocks base method.
func (m *MockPostClient) CreateGroupPost(ctx context.Context, in *post.CreateGroupPostRequest, opts ...grpc.CallOption) (*post.CreateGroupPostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupPost", varargs...)
	ret0, _ := ret[0].(*post.CreateGroupPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupPost indicates an expected call of CreateGroupPost.
func (mr *MockPostClientMockRecorder) CreateGroupPost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupPost", reflect.TypeOf((*MockPostClient)(nil).CreateGroupPost), varargs...)
}

// CreatePost mocks base method.
func (m *MockPostClient) CreatePost(ctx context.Context, in *post.CreatePostRequest, opts ...grpc.CallOption) (*post.CreatePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePost", varargs...)
	ret0, _ := ret[0].(*post.CreatePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostClientMockRecorder) CreatePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostClient)(nil).CreatePost), varargs...)
}

// DeleteComment mocks base method.
func (m *MockPostClient) DeleteComment(ctx context.Context, in *post.DeleteCommentRequest, opts ...grpc.CallOption) (*post.DeleteCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteComment", varargs...)
	ret0, _ := ret[0].(*post.DeleteCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostClientMockRecorder) DeleteComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostClient)(nil).DeleteComment), varargs...)
}

// DeletePost mocks base method.
func (m *MockPostClient) DeletePost(ctx context.Context, in *post.DeletePostRequest, opts ...grpc.CallOption) (*post.DeletePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePost", varargs...)
	ret0, _ := ret[0].(*post.DeletePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostClientMockRecorder) DeletePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostClient)(nil).DeletePost), varargs...)
}

// GetCommentsByPostID mocks base method.
func (m *MockPostClient) GetCommentsByPostID(ctx context.Context, in *post.GetCommentsByPostIDRequest, opts ...grpc.CallOption) (*post.GetCommentsByPostIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCommentsByPostID", varargs...)
	ret0, _ := ret[0].(*post.GetCommentsByPostIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostID indicates an expected call of GetCommentsByPostID.
func (mr *MockPostClientMockRecorder) GetCommentsByPostID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostID", reflect.TypeOf((*MockPostClient)(nil).GetCommentsByPostID), varargs...)
}

// GetGroupPostsBySubscriptionIDs mocks base method.
func (m *MockPostClient) GetGroupPostsBySubscriptionIDs(ctx context.Context, in *post.GetGroupPostsBySubscriptionIDsRequest, opts ...grpc.CallOption) (*post.GetGroupPostsBySubscriptionIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupPostsBySubscriptionIDs", varargs...)
	ret0, _ := ret[0].(*post.GetGroupPostsBySubscriptionIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupPostsBySubscriptionIDs indicates an expected call of GetGroupPostsBySubscriptionIDs.
func (mr *MockPostClientMockRecorder) GetGroupPostsBySubscriptionIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupPostsBySubscriptionIDs", reflect.TypeOf((*MockPostClient)(nil).GetGroupPostsBySubscriptionIDs), varargs...)
}

// GetLikedPosts mocks base method.
func (m *MockPostClient) GetLikedPosts(ctx context.Context, in *post.GetLikedPostsRequest, opts ...grpc.CallOption) (*post.GetLikedPostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLikedPosts", varargs...)
	ret0, _ := ret[0].(*post.GetLikedPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikedPosts indicates an expected call of GetLikedPosts.
func (mr *MockPostClientMockRecorder) GetLikedPosts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikedPosts", reflect.TypeOf((*MockPostClient)(nil).GetLikedPosts), varargs...)
}

// GetNewPosts mocks base method.
func (m *MockPostClient) GetNewPosts(ctx context.Context, in *post.GetNewPostsRequest, opts ...grpc.CallOption) (*post.GetNewPostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNewPosts", varargs...)
	ret0, _ := ret[0].(*post.GetNewPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewPosts indicates an expected call of GetNewPosts.
func (mr *MockPostClientMockRecorder) GetNewPosts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewPosts", reflect.TypeOf((*MockPostClient)(nil).GetNewPosts), varargs...)
}

// GetPostByID mocks base method.
func (m *MockPostClient) GetPostByID(ctx context.Context, in *post.GetPostByIDRequest, opts ...grpc.CallOption) (*post.GetPostByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPostByID", varargs...)
	ret0, _ := ret[0].(*post.GetPostByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostClientMockRecorder) GetPostByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostClient)(nil).GetPostByID), varargs...)
}

// GetPostsByGroupSubIDsAndUserSubIDs mocks base method.
func (m *MockPostClient) GetPostsByGroupSubIDsAndUserSubIDs(ctx context.Context, in *post.GetPostsByGroupSubIDsAndUserSubIDsRequest, opts ...grpc.CallOption) (*post.GetPostsByGroupSubIDsAndUserSubIDsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPostsByGroupSubIDsAndUserSubIDs", varargs...)
	ret0, _ := ret[0].(*post.GetPostsByGroupSubIDsAndUserSubIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByGroupSubIDsAndUserSubIDs indicates an expected call of GetPostsByGroupSubIDsAndUserSubIDs.
func (mr *MockPostClientMockRecorder) GetPostsByGroupSubIDsAndUserSubIDs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByGroupSubIDsAndUserSubIDs", reflect.TypeOf((*MockPostClient)(nil).GetPostsByGroupSubIDsAndUserSubIDs), varargs...)
}

// GetPostsOfGroup mocks base method.
func (m *MockPostClient) GetPostsOfGroup(ctx context.Context, in *post.GetPostsOfGroupRequest, opts ...grpc.CallOption) (*post.GetPostsOfGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPostsOfGroup", varargs...)
	ret0, _ := ret[0].(*post.GetPostsOfGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsOfGroup indicates an expected call of GetPostsOfGroup.
func (mr *MockPostClientMockRecorder) GetPostsOfGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsOfGroup", reflect.TypeOf((*MockPostClient)(nil).GetPostsOfGroup), varargs...)
}

// GetUserFriendsPosts mocks base method.
func (m *MockPostClient) GetUserFriendsPosts(ctx context.Context, in *post.GetUserFriendsPostsRequest, opts ...grpc.CallOption) (*post.GetUserFriendsPostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserFriendsPosts", varargs...)
	ret0, _ := ret[0].(*post.GetUserFriendsPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFriendsPosts indicates an expected call of GetUserFriendsPosts.
func (mr *MockPostClientMockRecorder) GetUserFriendsPosts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFriendsPosts", reflect.TypeOf((*MockPostClient)(nil).GetUserFriendsPosts), varargs...)
}

// GetUserPosts mocks base method.
func (m *MockPostClient) GetUserPosts(ctx context.Context, in *post.GetUserPostsRequest, opts ...grpc.CallOption) (*post.GetUserPostsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserPosts", varargs...)
	ret0, _ := ret[0].(*post.GetUserPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPosts indicates an expected call of GetUserPosts.
func (mr *MockPostClientMockRecorder) GetUserPosts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPosts", reflect.TypeOf((*MockPostClient)(nil).GetUserPosts), varargs...)
}

// LikeComment mocks base method.
func (m *MockPostClient) LikeComment(ctx context.Context, in *post.LikeCommentRequest, opts ...grpc.CallOption) (*post.LikeCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LikeComment", varargs...)
	ret0, _ := ret[0].(*post.LikeCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeComment indicates an expected call of LikeComment.
func (mr *MockPostClientMockRecorder) LikeComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeComment", reflect.TypeOf((*MockPostClient)(nil).LikeComment), varargs...)
}

// LikePost mocks base method.
func (m *MockPostClient) LikePost(ctx context.Context, in *post.LikePostRequest, opts ...grpc.CallOption) (*post.LikePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LikePost", varargs...)
	ret0, _ := ret[0].(*post.LikePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikePost indicates an expected call of LikePost.
func (mr *MockPostClientMockRecorder) LikePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePost", reflect.TypeOf((*MockPostClient)(nil).LikePost), varargs...)
}

// UnlikeComment mocks base method.
func (m *MockPostClient) UnlikeComment(ctx context.Context, in *post.UnlikeCommentRequest, opts ...grpc.CallOption) (*post.UnlikeCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnlikeComment", varargs...)
	ret0, _ := ret[0].(*post.UnlikeCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlikeComment indicates an expected call of UnlikeComment.
func (mr *MockPostClientMockRecorder) UnlikeComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeComment", reflect.TypeOf((*MockPostClient)(nil).UnlikeComment), varargs...)
}

// UnlikePost mocks base method.
func (m *MockPostClient) UnlikePost(ctx context.Context, in *post.UnlikePostRequest, opts ...grpc.CallOption) (*post.UnlikePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnlikePost", varargs...)
	ret0, _ := ret[0].(*post.UnlikePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlikePost indicates an expected call of UnlikePost.
func (mr *MockPostClientMockRecorder) UnlikePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikePost", reflect.TypeOf((*MockPostClient)(nil).UnlikePost), varargs...)
}

// UpdateComment mocks base method.
func (m *MockPostClient) UpdateComment(ctx context.Context, in *post.UpdateCommentRequest, opts ...grpc.CallOption) (*post.UpdateCommentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateComment", varargs...)
	ret0, _ := ret[0].(*post.UpdateCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockPostClientMockRecorder) UpdateComment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockPostClient)(nil).UpdateComment), varargs...)
}

// UpdatePost mocks base method.
func (m *MockPostClient) UpdatePost(ctx context.Context, in *post.UpdatePostRequest, opts ...grpc.CallOption) (*post.UpdatePostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePost", varargs...)
	ret0, _ := ret[0].(*post.UpdatePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostClientMockRecorder) UpdatePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostClient)(nil).UpdatePost), varargs...)
}

// Upload mocks base method.
func (m *MockPostClient) Upload(ctx context.Context, opts ...grpc.CallOption) (post.Post_UploadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upload", varargs...)
	ret0, _ := ret[0].(post.Post_UploadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockPostClientMockRecorder) Upload(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockPostClient)(nil).Upload), varargs...)
}

// MockPost_UploadClient is a mock of Post_UploadClient interface.
type MockPost_UploadClient struct {
	ctrl     *gomock.Controller
	recorder *MockPost_UploadClientMockRecorder
}

// MockPost_UploadClientMockRecorder is the mock recorder for MockPost_UploadClient.
type MockPost_UploadClientMockRecorder struct {
	mock *MockPost_UploadClient
}

// NewMockPost_UploadClient creates a new mock instance.
func NewMockPost_UploadClient(ctrl *gomock.Controller) *MockPost_UploadClient {
	mock := &MockPost_UploadClient{ctrl: ctrl}
	mock.recorder = &MockPost_UploadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPost_UploadClient) EXPECT() *MockPost_UploadClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockPost_UploadClient) CloseAndRecv() (*post.UploadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*post.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockPost_UploadClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockPost_UploadClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockPost_UploadClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPost_UploadClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPost_UploadClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPost_UploadClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPost_UploadClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPost_UploadClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPost_UploadClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPost_UploadClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPost_UploadClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockPost_UploadClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPost_UploadClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPost_UploadClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPost_UploadClient) Send(arg0 *post.UploadRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPost_UploadClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPost_UploadClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPost_UploadClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPost_UploadClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPost_UploadClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPost_UploadClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPost_UploadClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPost_UploadClient)(nil).Trailer))
}

// MockPostServer is a mock of PostServer interface.
type MockPostServer struct {
	ctrl     *gomock.Controller
	recorder *MockPostServerMockRecorder
}

// MockPostServerMockRecorder is the mock recorder for MockPostServer.
type MockPostServerMockRecorder struct {
	mock *MockPostServer
}

// NewMockPostServer creates a new mock instance.
func NewMockPostServer(ctrl *gomock.Controller) *MockPostServer {
	mock := &MockPostServer{ctrl: ctrl}
	mock.recorder = &MockPostServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostServer) EXPECT() *MockPostServerMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockPostServer) CreateComment(arg0 context.Context, arg1 *post.CreateCommentRequest) (*post.CreateCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(*post.CreateCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockPostServerMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockPostServer)(nil).CreateComment), arg0, arg1)
}

// CreateGroupPost mocks base method.
func (m *MockPostServer) CreateGroupPost(arg0 context.Context, arg1 *post.CreateGroupPostRequest) (*post.CreateGroupPostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroupPost", arg0, arg1)
	ret0, _ := ret[0].(*post.CreateGroupPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroupPost indicates an expected call of CreateGroupPost.
func (mr *MockPostServerMockRecorder) CreateGroupPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupPost", reflect.TypeOf((*MockPostServer)(nil).CreateGroupPost), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockPostServer) CreatePost(arg0 context.Context, arg1 *post.CreatePostRequest) (*post.CreatePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(*post.CreatePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostServerMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostServer)(nil).CreatePost), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockPostServer) DeleteComment(arg0 context.Context, arg1 *post.DeleteCommentRequest) (*post.DeleteCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(*post.DeleteCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostServerMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostServer)(nil).DeleteComment), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockPostServer) DeletePost(arg0 context.Context, arg1 *post.DeletePostRequest) (*post.DeletePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(*post.DeletePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostServerMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostServer)(nil).DeletePost), arg0, arg1)
}

// GetCommentsByPostID mocks base method.
func (m *MockPostServer) GetCommentsByPostID(arg0 context.Context, arg1 *post.GetCommentsByPostIDRequest) (*post.GetCommentsByPostIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostID", arg0, arg1)
	ret0, _ := ret[0].(*post.GetCommentsByPostIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostID indicates an expected call of GetCommentsByPostID.
func (mr *MockPostServerMockRecorder) GetCommentsByPostID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostID", reflect.TypeOf((*MockPostServer)(nil).GetCommentsByPostID), arg0, arg1)
}

// GetGroupPostsBySubscriptionIDs mocks base method.
func (m *MockPostServer) GetGroupPostsBySubscriptionIDs(arg0 context.Context, arg1 *post.GetGroupPostsBySubscriptionIDsRequest) (*post.GetGroupPostsBySubscriptionIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupPostsBySubscriptionIDs", arg0, arg1)
	ret0, _ := ret[0].(*post.GetGroupPostsBySubscriptionIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupPostsBySubscriptionIDs indicates an expected call of GetGroupPostsBySubscriptionIDs.
func (mr *MockPostServerMockRecorder) GetGroupPostsBySubscriptionIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupPostsBySubscriptionIDs", reflect.TypeOf((*MockPostServer)(nil).GetGroupPostsBySubscriptionIDs), arg0, arg1)
}

// GetLikedPosts mocks base method.
func (m *MockPostServer) GetLikedPosts(arg0 context.Context, arg1 *post.GetLikedPostsRequest) (*post.GetLikedPostsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikedPosts", arg0, arg1)
	ret0, _ := ret[0].(*post.GetLikedPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikedPosts indicates an expected call of GetLikedPosts.
func (mr *MockPostServerMockRecorder) GetLikedPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikedPosts", reflect.TypeOf((*MockPostServer)(nil).GetLikedPosts), arg0, arg1)
}

// GetNewPosts mocks base method.
func (m *MockPostServer) GetNewPosts(arg0 context.Context, arg1 *post.GetNewPostsRequest) (*post.GetNewPostsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewPosts", arg0, arg1)
	ret0, _ := ret[0].(*post.GetNewPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewPosts indicates an expected call of GetNewPosts.
func (mr *MockPostServerMockRecorder) GetNewPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewPosts", reflect.TypeOf((*MockPostServer)(nil).GetNewPosts), arg0, arg1)
}

// GetPostByID mocks base method.
func (m *MockPostServer) GetPostByID(arg0 context.Context, arg1 *post.GetPostByIDRequest) (*post.GetPostByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", arg0, arg1)
	ret0, _ := ret[0].(*post.GetPostByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostServerMockRecorder) GetPostByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostServer)(nil).GetPostByID), arg0, arg1)
}

// GetPostsByGroupSubIDsAndUserSubIDs mocks base method.
func (m *MockPostServer) GetPostsByGroupSubIDsAndUserSubIDs(arg0 context.Context, arg1 *post.GetPostsByGroupSubIDsAndUserSubIDsRequest) (*post.GetPostsByGroupSubIDsAndUserSubIDsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByGroupSubIDsAndUserSubIDs", arg0, arg1)
	ret0, _ := ret[0].(*post.GetPostsByGroupSubIDsAndUserSubIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByGroupSubIDsAndUserSubIDs indicates an expected call of GetPostsByGroupSubIDsAndUserSubIDs.
func (mr *MockPostServerMockRecorder) GetPostsByGroupSubIDsAndUserSubIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByGroupSubIDsAndUserSubIDs", reflect.TypeOf((*MockPostServer)(nil).GetPostsByGroupSubIDsAndUserSubIDs), arg0, arg1)
}

// GetPostsOfGroup mocks base method.
func (m *MockPostServer) GetPostsOfGroup(arg0 context.Context, arg1 *post.GetPostsOfGroupRequest) (*post.GetPostsOfGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsOfGroup", arg0, arg1)
	ret0, _ := ret[0].(*post.GetPostsOfGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsOfGroup indicates an expected call of GetPostsOfGroup.
func (mr *MockPostServerMockRecorder) GetPostsOfGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsOfGroup", reflect.TypeOf((*MockPostServer)(nil).GetPostsOfGroup), arg0, arg1)
}

// GetUserFriendsPosts mocks base method.
func (m *MockPostServer) GetUserFriendsPosts(arg0 context.Context, arg1 *post.GetUserFriendsPostsRequest) (*post.GetUserFriendsPostsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFriendsPosts", arg0, arg1)
	ret0, _ := ret[0].(*post.GetUserFriendsPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFriendsPosts indicates an expected call of GetUserFriendsPosts.
func (mr *MockPostServerMockRecorder) GetUserFriendsPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFriendsPosts", reflect.TypeOf((*MockPostServer)(nil).GetUserFriendsPosts), arg0, arg1)
}

// GetUserPosts mocks base method.
func (m *MockPostServer) GetUserPosts(arg0 context.Context, arg1 *post.GetUserPostsRequest) (*post.GetUserPostsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPosts", arg0, arg1)
	ret0, _ := ret[0].(*post.GetUserPostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPosts indicates an expected call of GetUserPosts.
func (mr *MockPostServerMockRecorder) GetUserPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPosts", reflect.TypeOf((*MockPostServer)(nil).GetUserPosts), arg0, arg1)
}

// LikeComment mocks base method.
func (m *MockPostServer) LikeComment(arg0 context.Context, arg1 *post.LikeCommentRequest) (*post.LikeCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeComment", arg0, arg1)
	ret0, _ := ret[0].(*post.LikeCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeComment indicates an expected call of LikeComment.
func (mr *MockPostServerMockRecorder) LikeComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeComment", reflect.TypeOf((*MockPostServer)(nil).LikeComment), arg0, arg1)
}

// LikePost mocks base method.
func (m *MockPostServer) LikePost(arg0 context.Context, arg1 *post.LikePostRequest) (*post.LikePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePost", arg0, arg1)
	ret0, _ := ret[0].(*post.LikePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikePost indicates an expected call of LikePost.
func (mr *MockPostServerMockRecorder) LikePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePost", reflect.TypeOf((*MockPostServer)(nil).LikePost), arg0, arg1)
}

// UnlikeComment mocks base method.
func (m *MockPostServer) UnlikeComment(arg0 context.Context, arg1 *post.UnlikeCommentRequest) (*post.UnlikeCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeComment", arg0, arg1)
	ret0, _ := ret[0].(*post.UnlikeCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlikeComment indicates an expected call of UnlikeComment.
func (mr *MockPostServerMockRecorder) UnlikeComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeComment", reflect.TypeOf((*MockPostServer)(nil).UnlikeComment), arg0, arg1)
}

// UnlikePost mocks base method.
func (m *MockPostServer) UnlikePost(arg0 context.Context, arg1 *post.UnlikePostRequest) (*post.UnlikePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikePost", arg0, arg1)
	ret0, _ := ret[0].(*post.UnlikePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlikePost indicates an expected call of UnlikePost.
func (mr *MockPostServerMockRecorder) UnlikePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikePost", reflect.TypeOf((*MockPostServer)(nil).UnlikePost), arg0, arg1)
}

// UpdateComment mocks base method.
func (m *MockPostServer) UpdateComment(arg0 context.Context, arg1 *post.UpdateCommentRequest) (*post.UpdateCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1)
	ret0, _ := ret[0].(*post.UpdateCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockPostServerMockRecorder) UpdateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockPostServer)(nil).UpdateComment), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockPostServer) UpdatePost(arg0 context.Context, arg1 *post.UpdatePostRequest) (*post.UpdatePostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(*post.UpdatePostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostServerMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostServer)(nil).UpdatePost), arg0, arg1)
}

// Upload mocks base method.
func (m *MockPostServer) Upload(arg0 post.Post_UploadServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockPostServerMockRecorder) Upload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockPostServer)(nil).Upload), arg0)
}

// mustEmbedUnimplementedPostServer mocks base method.
func (m *MockPostServer) mustEmbedUnimplementedPostServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPostServer")
}

// mustEmbedUnimplementedPostServer indicates an expected call of mustEmbedUnimplementedPostServer.
func (mr *MockPostServerMockRecorder) mustEmbedUnimplementedPostServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPostServer", reflect.TypeOf((*MockPostServer)(nil).mustEmbedUnimplementedPostServer))
}

// MockUnsafePostServer is a mock of UnsafePostServer interface.
type MockUnsafePostServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePostServerMockRecorder
}

// MockUnsafePostServerMockRecorder is the mock recorder for MockUnsafePostServer.
type MockUnsafePostServerMockRecorder struct {
	mock *MockUnsafePostServer
}

// NewMockUnsafePostServer creates a new mock instance.
func NewMockUnsafePostServer(ctrl *gomock.Controller) *MockUnsafePostServer {
	mock := &MockUnsafePostServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePostServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePostServer) EXPECT() *MockUnsafePostServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPostServer mocks base method.
func (m *MockUnsafePostServer) mustEmbedUnimplementedPostServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPostServer")
}

// mustEmbedUnimplementedPostServer indicates an expected call of mustEmbedUnimplementedPostServer.
func (mr *MockUnsafePostServerMockRecorder) mustEmbedUnimplementedPostServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPostServer", reflect.TypeOf((*MockUnsafePostServer)(nil).mustEmbedUnimplementedPostServer))
}

// MockPost_UploadServer is a mock of Post_UploadServer interface.
type MockPost_UploadServer struct {
	ctrl     *gomock.Controller
	recorder *MockPost_UploadServerMockRecorder
}

// MockPost_UploadServerMockRecorder is the mock recorder for MockPost_UploadServer.
type MockPost_UploadServerMockRecorder struct {
	mock *MockPost_UploadServer
}

// NewMockPost_UploadServer creates a new mock instance.
func NewMockPost_UploadServer(ctrl *gomock.Controller) *MockPost_UploadServer {
	mock := &MockPost_UploadServer{ctrl: ctrl}
	mock.recorder = &MockPost_UploadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPost_UploadServer) EXPECT() *MockPost_UploadServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPost_UploadServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPost_UploadServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPost_UploadServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockPost_UploadServer) Recv() (*post.UploadRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*post.UploadRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPost_UploadServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPost_UploadServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPost_UploadServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPost_UploadServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPost_UploadServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockPost_UploadServer) SendAndClose(arg0 *post.UploadResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockPost_UploadServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockPost_UploadServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockPost_UploadServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPost_UploadServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPost_UploadServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPost_UploadServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPost_UploadServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPost_UploadServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPost_UploadServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPost_UploadServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPost_UploadServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPost_UploadServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPost_UploadServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPost_UploadServer)(nil).SetTrailer), arg0)
}
