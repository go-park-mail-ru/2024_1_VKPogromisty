// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/chat/unsent_message_attachments.go

// Package mock_chat is a generated GoMock package.
package mock_chat

import (
	context "context"
	reflect "reflect"
	domain "socio/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockUnsentMessageAttachmentsStorage is a mock of UnsentMessageAttachmentsStorage interface.
type MockUnsentMessageAttachmentsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUnsentMessageAttachmentsStorageMockRecorder
}

// MockUnsentMessageAttachmentsStorageMockRecorder is the mock recorder for MockUnsentMessageAttachmentsStorage.
type MockUnsentMessageAttachmentsStorageMockRecorder struct {
	mock *MockUnsentMessageAttachmentsStorage
}

// NewMockUnsentMessageAttachmentsStorage creates a new mock instance.
func NewMockUnsentMessageAttachmentsStorage(ctrl *gomock.Controller) *MockUnsentMessageAttachmentsStorage {
	mock := &MockUnsentMessageAttachmentsStorage{ctrl: ctrl}
	mock.recorder = &MockUnsentMessageAttachmentsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsentMessageAttachmentsStorage) EXPECT() *MockUnsentMessageAttachmentsStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUnsentMessageAttachmentsStorage) Delete(ctx context.Context, attach *domain.UnsentMessageAttachment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, attach)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUnsentMessageAttachmentsStorageMockRecorder) Delete(ctx, attach interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUnsentMessageAttachmentsStorage)(nil).Delete), ctx, attach)
}

// DeleteAll mocks base method.
func (m *MockUnsentMessageAttachmentsStorage) DeleteAll(ctx context.Context, attach *domain.UnsentMessageAttachment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, attach)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockUnsentMessageAttachmentsStorageMockRecorder) DeleteAll(ctx, attach interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockUnsentMessageAttachmentsStorage)(nil).DeleteAll), ctx, attach)
}

// GetAll mocks base method.
func (m *MockUnsentMessageAttachmentsStorage) GetAll(ctx context.Context, attach *domain.UnsentMessageAttachment) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, attach)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUnsentMessageAttachmentsStorageMockRecorder) GetAll(ctx, attach interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUnsentMessageAttachmentsStorage)(nil).GetAll), ctx, attach)
}

// Store mocks base method.
func (m *MockUnsentMessageAttachmentsStorage) Store(ctx context.Context, attach *domain.UnsentMessageAttachment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, attach)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockUnsentMessageAttachmentsStorageMockRecorder) Store(ctx, attach interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUnsentMessageAttachmentsStorage)(nil).Store), ctx, attach)
}

// MockMessageAttachmentStorage is a mock of MessageAttachmentStorage interface.
type MockMessageAttachmentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageAttachmentStorageMockRecorder
}

// MockMessageAttachmentStorageMockRecorder is the mock recorder for MockMessageAttachmentStorage.
type MockMessageAttachmentStorageMockRecorder struct {
	mock *MockMessageAttachmentStorage
}

// NewMockMessageAttachmentStorage creates a new mock instance.
func NewMockMessageAttachmentStorage(ctrl *gomock.Controller) *MockMessageAttachmentStorage {
	mock := &MockMessageAttachmentStorage{ctrl: ctrl}
	mock.recorder = &MockMessageAttachmentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageAttachmentStorage) EXPECT() *MockMessageAttachmentStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMessageAttachmentStorage) Delete(fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageAttachmentStorageMockRecorder) Delete(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageAttachmentStorage)(nil).Delete), fileName)
}

// Store mocks base method.
func (m *MockMessageAttachmentStorage) Store(fileName, filePath, contentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", fileName, filePath, contentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockMessageAttachmentStorageMockRecorder) Store(fileName, filePath, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMessageAttachmentStorage)(nil).Store), fileName, filePath, contentType)
}
