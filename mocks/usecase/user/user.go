// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/user/user.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"
	domain "socio/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// CheckIfUserIsAdmin mocks base method.
func (m *MockUserStorage) CheckIfUserIsAdmin(ctx context.Context, publicGroupID, userID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfUserIsAdmin", ctx, publicGroupID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfUserIsAdmin indicates an expected call of CheckIfUserIsAdmin.
func (mr *MockUserStorageMockRecorder) CheckIfUserIsAdmin(ctx, publicGroupID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfUserIsAdmin", reflect.TypeOf((*MockUserStorage)(nil).CheckIfUserIsAdmin), ctx, publicGroupID, userID)
}

// DeletePublicGroupAdmin mocks base method.
func (m *MockUserStorage) DeletePublicGroupAdmin(ctx context.Context, publicGroupAdmin *domain.PublicGroupAdmin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicGroupAdmin", ctx, publicGroupAdmin)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublicGroupAdmin indicates an expected call of DeletePublicGroupAdmin.
func (mr *MockUserStorageMockRecorder) DeletePublicGroupAdmin(ctx, publicGroupAdmin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicGroupAdmin", reflect.TypeOf((*MockUserStorage)(nil).DeletePublicGroupAdmin), ctx, publicGroupAdmin)
}

// DeleteUser mocks base method.
func (m *MockUserStorage) DeleteUser(ctx context.Context, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserStorageMockRecorder) DeleteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserStorage)(nil).DeleteUser), ctx, userID)
}

// GetAdminsByPublicGroupID mocks base method.
func (m *MockUserStorage) GetAdminsByPublicGroupID(ctx context.Context, publicGroupID uint) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminsByPublicGroupID", ctx, publicGroupID)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminsByPublicGroupID indicates an expected call of GetAdminsByPublicGroupID.
func (mr *MockUserStorageMockRecorder) GetAdminsByPublicGroupID(ctx, publicGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminsByPublicGroupID", reflect.TypeOf((*MockUserStorage)(nil).GetAdminsByPublicGroupID), ctx, publicGroupID)
}

// GetSubscriptionIDs mocks base method.
func (m *MockUserStorage) GetSubscriptionIDs(ctx context.Context, userID uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionIDs", ctx, userID)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionIDs indicates an expected call of GetSubscriptionIDs.
func (mr *MockUserStorageMockRecorder) GetSubscriptionIDs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionIDs", reflect.TypeOf((*MockUserStorage)(nil).GetSubscriptionIDs), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockUserStorage) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserStorageMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserStorage)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockUserStorage) GetUserByID(ctx context.Context, userID uint) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserStorageMockRecorder) GetUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserStorage)(nil).GetUserByID), ctx, userID)
}

// GetUserByIDWithSubsInfo mocks base method.
func (m *MockUserStorage) GetUserByIDWithSubsInfo(ctx context.Context, userID, authorizedUserID uint) (*domain.User, bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIDWithSubsInfo", ctx, userID, authorizedUserID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetUserByIDWithSubsInfo indicates an expected call of GetUserByIDWithSubsInfo.
func (mr *MockUserStorageMockRecorder) GetUserByIDWithSubsInfo(ctx, userID, authorizedUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIDWithSubsInfo", reflect.TypeOf((*MockUserStorage)(nil).GetUserByIDWithSubsInfo), ctx, userID, authorizedUserID)
}

// SearchByName mocks base method.
func (m *MockUserStorage) SearchByName(ctx context.Context, query string) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", ctx, query)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockUserStorageMockRecorder) SearchByName(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockUserStorage)(nil).SearchByName), ctx, query)
}

// StorePublicGroupAdmin mocks base method.
func (m *MockUserStorage) StorePublicGroupAdmin(ctx context.Context, publicGroupAdmin *domain.PublicGroupAdmin) (*domain.PublicGroupAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePublicGroupAdmin", ctx, publicGroupAdmin)
	ret0, _ := ret[0].(*domain.PublicGroupAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorePublicGroupAdmin indicates an expected call of StorePublicGroupAdmin.
func (mr *MockUserStorageMockRecorder) StorePublicGroupAdmin(ctx, publicGroupAdmin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePublicGroupAdmin", reflect.TypeOf((*MockUserStorage)(nil).StorePublicGroupAdmin), ctx, publicGroupAdmin)
}

// StoreUser mocks base method.
func (m *MockUserStorage) StoreUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUser indicates an expected call of StoreUser.
func (mr *MockUserStorageMockRecorder) StoreUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUser", reflect.TypeOf((*MockUserStorage)(nil).StoreUser), ctx, user)
}

// UpdateUser mocks base method.
func (m *MockUserStorage) UpdateUser(ctx context.Context, user *domain.User, prevPassword string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user, prevPassword)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserStorageMockRecorder) UpdateUser(ctx, user, prevPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserStorage)(nil).UpdateUser), ctx, user, prevPassword)
}

// MockAvatarStorage is a mock of AvatarStorage interface.
type MockAvatarStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAvatarStorageMockRecorder
}

// MockAvatarStorageMockRecorder is the mock recorder for MockAvatarStorage.
type MockAvatarStorageMockRecorder struct {
	mock *MockAvatarStorage
}

// NewMockAvatarStorage creates a new mock instance.
func NewMockAvatarStorage(ctrl *gomock.Controller) *MockAvatarStorage {
	mock := &MockAvatarStorage{ctrl: ctrl}
	mock.recorder = &MockAvatarStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvatarStorage) EXPECT() *MockAvatarStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAvatarStorage) Delete(fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAvatarStorageMockRecorder) Delete(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAvatarStorage)(nil).Delete), fileName)
}

// Store mocks base method.
func (m *MockAvatarStorage) Store(fileName, filePath, contentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", fileName, filePath, contentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockAvatarStorageMockRecorder) Store(fileName, filePath, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockAvatarStorage)(nil).Store), fileName, filePath, contentType)
}
